
/Users/gaolooong/Downloads/FreeDiving/target/5.5.0/p2/FreeDiving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fe000  085fe000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fe018  085fe018  0000e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fe520  085fe0a8  0000e520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00001ac8  023fe528  085fe0b0  0000e528  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad94  085ffb78  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  1007ae0c  1007ae0c  0002ae0c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffbf0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000003c4  085ffbf4  085ffbf4  0001fbf4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fbf4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013254e  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00013da0  00000000  00000000  0015254e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00037b26  00000000  00000000  001662ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a38  00000000  00000000  0019de14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000a700  00000000  00000000  001a084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027d07  00000000  00000000  001aaf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004251b  00000000  00000000  001d2c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cc2ac  00000000  00000000  0021516e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000074c4  00000000  00000000  002e141c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fe018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe018:	4813      	ldr	r0, [pc, #76]	; (85fe068 <module_user_pre_init+0x50>)
 85fe01a:	4914      	ldr	r1, [pc, #80]	; (85fe06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fe01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe01e:	4288      	cmp	r0, r1
 85fe020:	d005      	beq.n	85fe02e <module_user_pre_init+0x16>
 85fe022:	4a13      	ldr	r2, [pc, #76]	; (85fe070 <module_user_pre_init+0x58>)
 85fe024:	4282      	cmp	r2, r0
 85fe026:	d002      	beq.n	85fe02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fe028:	4b12      	ldr	r3, [pc, #72]	; (85fe074 <module_user_pre_init+0x5c>)
 85fe02a:	1a12      	subs	r2, r2, r0
 85fe02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fe02e:	4812      	ldr	r0, [pc, #72]	; (85fe078 <module_user_pre_init+0x60>)
 85fe030:	4a12      	ldr	r2, [pc, #72]	; (85fe07c <module_user_pre_init+0x64>)
 85fe032:	2100      	movs	r1, #0
 85fe034:	4b12      	ldr	r3, [pc, #72]	; (85fe080 <module_user_pre_init+0x68>)
 85fe036:	1a12      	subs	r2, r2, r0
 85fe038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fe03a:	4812      	ldr	r0, [pc, #72]	; (85fe084 <module_user_pre_init+0x6c>)
 85fe03c:	4912      	ldr	r1, [pc, #72]	; (85fe088 <module_user_pre_init+0x70>)
 85fe03e:	4288      	cmp	r0, r1
 85fe040:	d005      	beq.n	85fe04e <module_user_pre_init+0x36>
 85fe042:	4a12      	ldr	r2, [pc, #72]	; (85fe08c <module_user_pre_init+0x74>)
 85fe044:	4282      	cmp	r2, r0
 85fe046:	d002      	beq.n	85fe04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fe048:	4b0a      	ldr	r3, [pc, #40]	; (85fe074 <module_user_pre_init+0x5c>)
 85fe04a:	1a12      	subs	r2, r2, r0
 85fe04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fe04e:	4810      	ldr	r0, [pc, #64]	; (85fe090 <module_user_pre_init+0x78>)
 85fe050:	4910      	ldr	r1, [pc, #64]	; (85fe094 <module_user_pre_init+0x7c>)
 85fe052:	4288      	cmp	r0, r1
 85fe054:	d005      	beq.n	85fe062 <module_user_pre_init+0x4a>
 85fe056:	4a10      	ldr	r2, [pc, #64]	; (85fe098 <module_user_pre_init+0x80>)
 85fe058:	4282      	cmp	r2, r0
 85fe05a:	d002      	beq.n	85fe062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fe05c:	4b05      	ldr	r3, [pc, #20]	; (85fe074 <module_user_pre_init+0x5c>)
 85fe05e:	1a12      	subs	r2, r2, r0
 85fe060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fe062:	4801      	ldr	r0, [pc, #4]	; (85fe068 <module_user_pre_init+0x50>)
 85fe064:	bd08      	pop	{r3, pc}
 85fe066:	bf00      	nop
 85fe068:	1007ad94 	.word	0x1007ad94
 85fe06c:	085ffb78 	.word	0x085ffb78
 85fe070:	1007ae0c 	.word	0x1007ae0c
 85fe074:	10110d2d 	.word	0x10110d2d
 85fe078:	1007ae0c 	.word	0x1007ae0c
 85fe07c:	1007afe8 	.word	0x1007afe8
 85fe080:	10110ea1 	.word	0x10110ea1
 85fe084:	023fe520 	.word	0x023fe520
 85fe088:	085fe0a8 	.word	0x085fe0a8
 85fe08c:	023fe528 	.word	0x023fe528
 85fe090:	023fe528 	.word	0x023fe528
 85fe094:	085fe0b0 	.word	0x085fe0b0
 85fe098:	023ffff0 	.word	0x023ffff0

085fe09c <dynalib_preinit>:
 85fe09c:	085fe019 00000000                       .._.....

Disassembly of section .psram_text:

023fe528 <strlen>:
 23fe528:	4603      	mov	r3, r0
 23fe52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe52e:	2a00      	cmp	r2, #0
 23fe530:	d1fb      	bne.n	23fe52a <strlen+0x2>
 23fe532:	1a18      	subs	r0, r3, r0
 23fe534:	3801      	subs	r0, #1
 23fe536:	4770      	bx	lr

023fe538 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe538:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe53a:	f001 f9af 	bl	23ff89c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe53e:	2500      	movs	r5, #0
 23fe540:	4e05      	ldr	r6, [pc, #20]	; (23fe558 <module_user_init+0x20>)
 23fe542:	4c06      	ldr	r4, [pc, #24]	; (23fe55c <module_user_init+0x24>)
 23fe544:	1ba4      	subs	r4, r4, r6
 23fe546:	08a4      	lsrs	r4, r4, #2
 23fe548:	42ac      	cmp	r4, r5
 23fe54a:	d100      	bne.n	23fe54e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe54c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe54e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe552:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe554:	3501      	adds	r5, #1
 23fe556:	e7f7      	b.n	23fe548 <module_user_init+0x10>
 23fe558:	023fffcc 	.word	0x023fffcc
 23fe55c:	023ffff0 	.word	0x023ffff0

023fe560 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe560:	f000 b816 	b.w	23fe590 <setup>

023fe564 <module_user_loop>:
}

void module_user_loop() {
 23fe564:	b508      	push	{r3, lr}
    loop();
 23fe566:	f000 f875 	bl	23fe654 <loop>
    _post_loop();
}
 23fe56a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe56e:	f001 b94d 	b.w	23ff80c <_post_loop>

023fe572 <_Znaj>:
 23fe572:	f000 bd31 	b.w	23fefd8 <malloc>

023fe576 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe576:	f000 bd3d 	b.w	23feff4 <free>

023fe57a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe57a:	7800      	ldrb	r0, [r0, #0]
 23fe57c:	fab0 f080 	clz	r0, r0
 23fe580:	0940      	lsrs	r0, r0, #5
 23fe582:	4770      	bx	lr

023fe584 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe584:	2301      	movs	r3, #1
 23fe586:	7003      	strb	r3, [r0, #0]
 23fe588:	4770      	bx	lr

023fe58a <_Z35PulseSensorPlaygroundSetupInterruptv>:
  #endif

#endif // USE_ARDUINO_INTERRUPTS

  return result;
}
 23fe58a:	2000      	movs	r0, #0
 23fe58c:	4770      	bx	lr
	...

023fe590 <setup>:
const int LED = LED_BUILTIN;       // The on-board Arduino LED, close to PIN 13.
int Threshold = 550;               // Determine which Signal to "count as a beat" and which to ignore.
PulseSensorPlayground pulseSensor; // Creates an instance of the PulseSensorPlayground object called "pulseSensor"

void setup()
{
 23fe590:	b513      	push	{r0, r1, r4, lr}

  Serial.begin(9600); // For Serial Monitor
 23fe592:	f001 f8ab 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe596:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe59a:	f001 f89b 	bl	23ff6d4 <_ZN9USBSerial5beginEl>
  myservo.attach(D0); // attaches the servo on the D0 pin to the servo object
 23fe59e:	2400      	movs	r4, #0
 23fe5a0:	23b4      	movs	r3, #180	; 0xb4
 23fe5a2:	f44f 7208 	mov.w	r2, #544	; 0x220
 23fe5a6:	4621      	mov	r1, r4
 23fe5a8:	e9cd 4300 	strd	r4, r3, [sp]
 23fe5ac:	4818      	ldr	r0, [pc, #96]	; (23fe610 <setup+0x80>)
 23fe5ae:	f44f 6316 	mov.w	r3, #2400	; 0x960
 23fe5b2:	f000 ff95 	bl	23ff4e0 <_ZN5Servo6attachEtttss>
  Serial.println("HEYYYY!");
 23fe5b6:	f001 f899 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe5ba:	4916      	ldr	r1, [pc, #88]	; (23fe614 <setup+0x84>)
 23fe5bc:	f000 ff41 	bl	23ff442 <_ZN5Print7printlnEPKc>
  // Configure the PulseSensor object, by assigning our variables to it.
  pulseSensor.analogInput(PulseWire);
 23fe5c0:	4622      	mov	r2, r4
 23fe5c2:	4621      	mov	r1, r4
 23fe5c4:	4814      	ldr	r0, [pc, #80]	; (23fe618 <setup+0x88>)
 23fe5c6:	f000 f933 	bl	23fe830 <_ZN21PulseSensorPlayground11analogInputEii>
  pulseSensor.blinkOnPulse(LED); // auto-magically blink Arduino's LED with heartbeat.
 23fe5ca:	4622      	mov	r2, r4
 23fe5cc:	2107      	movs	r1, #7
 23fe5ce:	4812      	ldr	r0, [pc, #72]	; (23fe618 <setup+0x88>)
 23fe5d0:	f000 f93a 	bl	23fe848 <_ZN21PulseSensorPlayground12blinkOnPulseEii>
  pulseSensor.setThreshold(Threshold);
 23fe5d4:	4b11      	ldr	r3, [pc, #68]	; (23fe61c <setup+0x8c>)
 23fe5d6:	4810      	ldr	r0, [pc, #64]	; (23fe618 <setup+0x88>)
 23fe5d8:	4622      	mov	r2, r4
 23fe5da:	6819      	ldr	r1, [r3, #0]
 23fe5dc:	f000 f95b 	bl	23fe896 <_ZN21PulseSensorPlayground12setThresholdEii>

  // Double-check the "pulseSensor" object was created and "began" seeing a signal.
  if (pulseSensor.begin())
 23fe5e0:	480d      	ldr	r0, [pc, #52]	; (23fe618 <setup+0x88>)
 23fe5e2:	f000 f901 	bl	23fe7e8 <_ZN21PulseSensorPlayground5beginEv>
 23fe5e6:	b120      	cbz	r0, 23fe5f2 <setup+0x62>
  {
    Serial.println("We created a pulseSensor Object !"); // This prints one time at Arduino power-up,  or on Arduino reset.
 23fe5e8:	f001 f880 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe5ec:	490c      	ldr	r1, [pc, #48]	; (23fe620 <setup+0x90>)
 23fe5ee:	f000 ff28 	bl	23ff442 <_ZN5Print7printlnEPKc>
  }

  for (int i = 0; i < MAX_SIZE; i++)
  {
    initialValues[i] = 0; // 初始化数组
 23fe5f2:	2228      	movs	r2, #40	; 0x28
 23fe5f4:	2100      	movs	r1, #0
 23fe5f6:	480b      	ldr	r0, [pc, #44]	; (23fe624 <setup+0x94>)
 23fe5f8:	f001 fb25 	bl	23ffc46 <memset>
  }
  for (int i = 0; i < 5; i++)
  {
    currentValues[i] = 0; // 初始化数组
 23fe5fc:	2200      	movs	r2, #0
 23fe5fe:	4b0a      	ldr	r3, [pc, #40]	; (23fe628 <setup+0x98>)
 23fe600:	601a      	str	r2, [r3, #0]
 23fe602:	605a      	str	r2, [r3, #4]
 23fe604:	609a      	str	r2, [r3, #8]
 23fe606:	60da      	str	r2, [r3, #12]
 23fe608:	611a      	str	r2, [r3, #16]
  }
}
 23fe60a:	b002      	add	sp, #8
 23fe60c:	bd10      	pop	{r4, pc}
 23fe60e:	bf00      	nop
 23fe610:	1007ae54 	.word	0x1007ae54
 23fe614:	023ffd94 	.word	0x023ffd94
 23fe618:	1007ae64 	.word	0x1007ae64
 23fe61c:	1007ad98 	.word	0x1007ad98
 23fe620:	023ffd9c 	.word	0x023ffd9c
 23fe624:	1007ae2c 	.word	0x1007ae2c
 23fe628:	1007ae10 	.word	0x1007ae10

023fe62c <_Z12averageValuePfi>:
}

float averageValue(float arr[], int size)
{
  float sum = 0;
  for (int i = 0; i < size; i++)
 23fe62c:	2300      	movs	r3, #0
  float sum = 0;
 23fe62e:	eddf 7a08 	vldr	s15, [pc, #32]	; 23fe650 <_Z12averageValuePfi+0x24>
  for (int i = 0; i < size; i++)
 23fe632:	428b      	cmp	r3, r1
 23fe634:	da05      	bge.n	23fe642 <_Z12averageValuePfi+0x16>
  {
    sum += arr[i];
 23fe636:	ecb0 7a01 	vldmia	r0!, {s14}
  for (int i = 0; i < size; i++)
 23fe63a:	3301      	adds	r3, #1
    sum += arr[i];
 23fe63c:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i = 0; i < size; i++)
 23fe640:	e7f7      	b.n	23fe632 <_Z12averageValuePfi+0x6>
  }
  return sum / size;
 23fe642:	ee07 1a10 	vmov	s14, r1
 23fe646:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 23fe64a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23fe64e:	4770      	bx	lr
 23fe650:	00000000 	.word	0x00000000

023fe654 <loop>:
{
 23fe654:	b538      	push	{r3, r4, r5, lr}
  Serial.println("HEYYYY!");
 23fe656:	f001 f849 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe65a:	4941      	ldr	r1, [pc, #260]	; (23fe760 <loop+0x10c>)
 23fe65c:	f000 fef1 	bl	23ff442 <_ZN5Print7printlnEPKc>
  if (pulseSensor.sawStartOfBeat())
 23fe660:	2100      	movs	r1, #0
 23fe662:	4840      	ldr	r0, [pc, #256]	; (23fe764 <loop+0x110>)
 23fe664:	f000 f90a 	bl	23fe87c <_ZN21PulseSensorPlayground14sawStartOfBeatEi>
 23fe668:	2800      	cmp	r0, #0
 23fe66a:	d039      	beq.n	23fe6e0 <loop+0x8c>
    myBPM = pulseSensor.getBeatsPerMinute();      // Constantly test to see if "a beat happened".
 23fe66c:	2100      	movs	r1, #0
 23fe66e:	483d      	ldr	r0, [pc, #244]	; (23fe764 <loop+0x110>)
 23fe670:	f000 f8f6 	bl	23fe860 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi>
 23fe674:	4604      	mov	r4, r0
    Serial.println("♥  A HeartBeat Happened ! "); // If test is "true", print a message "a heartbeat happened".
 23fe676:	f001 f839 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe67a:	493b      	ldr	r1, [pc, #236]	; (23fe768 <loop+0x114>)
 23fe67c:	f000 fee1 	bl	23ff442 <_ZN5Print7printlnEPKc>
    Serial.println("BPM: ");                      // Print phrase "BPM: "
 23fe680:	f001 f834 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe684:	4939      	ldr	r1, [pc, #228]	; (23fe76c <loop+0x118>)
 23fe686:	f000 fedc 	bl	23ff442 <_ZN5Print7printlnEPKc>
    Serial.println(myBPM);                        // Print the value inside of myBPM.
 23fe68a:	f001 f82f 	bl	23ff6ec <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fe68e:	2c00      	cmp	r4, #0
 23fe690:	4605      	mov	r5, r0
 23fe692:	da23      	bge.n	23fe6dc <loop+0x88>
            t = print('-');
 23fe694:	212d      	movs	r1, #45	; 0x2d
 23fe696:	f000 fec5 	bl	23ff424 <_ZN5Print5printEc>
            val = -n;
 23fe69a:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe69c:	220a      	movs	r2, #10
 23fe69e:	4628      	mov	r0, r5
 23fe6a0:	f000 fed9 	bl	23ff456 <_ZN5Print11printNumberEmh>
        n += println();
 23fe6a4:	4628      	mov	r0, r5
 23fe6a6:	f000 fec0 	bl	23ff42a <_ZN5Print7printlnEv>
  if (frameCount < 10)
 23fe6aa:	4d31      	ldr	r5, [pc, #196]	; (23fe770 <loop+0x11c>)
 23fe6ac:	6829      	ldr	r1, [r5, #0]
 23fe6ae:	2909      	cmp	r1, #9
 23fe6b0:	dc18      	bgt.n	23fe6e4 <loop+0x90>
    if (myBPM != 0)
 23fe6b2:	b174      	cbz	r4, 23fe6d2 <loop+0x7e>
      initialValues[initialIndex] = myBPM; // 将当前值存储在数组中
 23fe6b4:	ee07 4a90 	vmov	s15, r4
 23fe6b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fe6bc:	482d      	ldr	r0, [pc, #180]	; (23fe774 <loop+0x120>)
 23fe6be:	4a2e      	ldr	r2, [pc, #184]	; (23fe778 <loop+0x124>)
 23fe6c0:	6803      	ldr	r3, [r0, #0]
      frameCount++;
 23fe6c2:	3101      	adds	r1, #1
      initialValues[initialIndex] = myBPM; // 将当前值存储在数组中
 23fe6c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23fe6c8:	edc2 7a00 	vstr	s15, [r2]
      initialIndex++;
 23fe6cc:	3301      	adds	r3, #1
      frameCount++;
 23fe6ce:	6029      	str	r1, [r5, #0]
      initialIndex++;
 23fe6d0:	6003      	str	r3, [r0, #0]
  delay(20); // considered best practice in a simple sketch.
 23fe6d2:	2014      	movs	r0, #20
}
 23fe6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(20); // considered best practice in a simple sketch.
 23fe6d8:	f000 bcb6 	b.w	23ff048 <delay>
            val = n;
 23fe6dc:	4621      	mov	r1, r4
 23fe6de:	e7dd      	b.n	23fe69c <loop+0x48>
  int myBPM = 0;
 23fe6e0:	4604      	mov	r4, r0
 23fe6e2:	e7e2      	b.n	23fe6aa <loop+0x56>
  else if (frameCount == 10)
 23fe6e4:	290a      	cmp	r1, #10
 23fe6e6:	4a25      	ldr	r2, [pc, #148]	; (23fe77c <loop+0x128>)
 23fe6e8:	d111      	bne.n	23fe70e <loop+0xba>
    an = averageValue(initialValues, 10);
 23fe6ea:	4c23      	ldr	r4, [pc, #140]	; (23fe778 <loop+0x124>)
 23fe6ec:	4620      	mov	r0, r4
 23fe6ee:	f7ff ff9d 	bl	23fe62c <_Z12averageValuePfi>
 23fe6f2:	4b23      	ldr	r3, [pc, #140]	; (23fe780 <loop+0x12c>)
 23fe6f4:	ed83 0a00 	vstr	s0, [r3]
      currentValues[i] = initialValues[i + 5];
 23fe6f8:	6963      	ldr	r3, [r4, #20]
 23fe6fa:	6013      	str	r3, [r2, #0]
 23fe6fc:	69a3      	ldr	r3, [r4, #24]
 23fe6fe:	6053      	str	r3, [r2, #4]
 23fe700:	69e3      	ldr	r3, [r4, #28]
 23fe702:	6093      	str	r3, [r2, #8]
 23fe704:	6a23      	ldr	r3, [r4, #32]
 23fe706:	60d3      	str	r3, [r2, #12]
 23fe708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe70a:	6113      	str	r3, [r2, #16]
    for (int i = 0; i < 5; i++)
 23fe70c:	e7e1      	b.n	23fe6d2 <loop+0x7e>
 23fe70e:	4613      	mov	r3, r2
  else if (frameCount == 10)
 23fe710:	2100      	movs	r1, #0
      if (i == 4)
 23fe712:	2904      	cmp	r1, #4
        currentValues[i] = myBPM;
 23fe714:	bf06      	itte	eq
 23fe716:	ee07 4a90 	vmoveq	s15, r4
 23fe71a:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
        currentValues[i] = currentValues[i + 1];
 23fe71e:	6858      	ldrne	r0, [r3, #4]
    for (int i = 0; i < 5; i++)
 23fe720:	f101 0101 	add.w	r1, r1, #1
        currentValues[i] = currentValues[i + 1];
 23fe724:	bf14      	ite	ne
 23fe726:	6018      	strne	r0, [r3, #0]
        currentValues[i] = myBPM;
 23fe728:	edc2 7a04 	vstreq	s15, [r2, #16]
    for (int i = 0; i < 5; i++)
 23fe72c:	2905      	cmp	r1, #5
 23fe72e:	f103 0304 	add.w	r3, r3, #4
 23fe732:	d1ee      	bne.n	23fe712 <loop+0xbe>
    float current = averageValue(currentValues, 5);
 23fe734:	4811      	ldr	r0, [pc, #68]	; (23fe77c <loop+0x128>)
 23fe736:	f7ff ff79 	bl	23fe62c <_Z12averageValuePfi>
    if (current < an - 20)
 23fe73a:	4b11      	ldr	r3, [pc, #68]	; (23fe780 <loop+0x12c>)
 23fe73c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 23fe740:	edd3 7a00 	vldr	s15, [r3]
 23fe744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23fe748:	eef4 7ac0 	vcmpe.f32	s15, s0
 23fe74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fe750:	ddbf      	ble.n	23fe6d2 <loop+0x7e>
      Serial.println("Dying!");
 23fe752:	f000 ffcb 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23fe756:	490b      	ldr	r1, [pc, #44]	; (23fe784 <loop+0x130>)
 23fe758:	f000 fe73 	bl	23ff442 <_ZN5Print7printlnEPKc>
 23fe75c:	e7b9      	b.n	23fe6d2 <loop+0x7e>
 23fe75e:	bf00      	nop
 23fe760:	023ffd94 	.word	0x023ffd94
 23fe764:	1007ae64 	.word	0x1007ae64
 23fe768:	023ffdbe 	.word	0x023ffdbe
 23fe76c:	023ffddb 	.word	0x023ffddb
 23fe770:	1007ae24 	.word	0x1007ae24
 23fe774:	1007ae28 	.word	0x1007ae28
 23fe778:	1007ae2c 	.word	0x1007ae2c
 23fe77c:	1007ae10 	.word	0x1007ae10
 23fe780:	1007ae0c 	.word	0x1007ae0c
 23fe784:	023ffde1 	.word	0x023ffde1

023fe788 <_GLOBAL__sub_I__ZN21PulseSensorPlayground15UsingInterruptsE>:
  for (pos = 180; pos >= 1; pos -= 1) // goes from 180 degrees to 0 degrees
  {
    myservo.write(pos); // tell servo to go to position in variable 'pos'
    delay(15);          // waits 15ms for the servo to reach the position
  }
}
 23fe788:	b508      	push	{r3, lr}
Servo myservo; // create servo object to control a servo
 23fe78a:	4804      	ldr	r0, [pc, #16]	; (23fe79c <_GLOBAL__sub_I__ZN21PulseSensorPlayground15UsingInterruptsE+0x14>)
 23fe78c:	f000 fe94 	bl	23ff4b8 <_ZN5ServoC1Ev>
}
 23fe790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PulseSensorPlayground pulseSensor; // Creates an instance of the PulseSensorPlayground object called "pulseSensor"
 23fe794:	2101      	movs	r1, #1
 23fe796:	4802      	ldr	r0, [pc, #8]	; (23fe7a0 <_GLOBAL__sub_I__ZN21PulseSensorPlayground15UsingInterruptsE+0x18>)
 23fe798:	f000 b804 	b.w	23fe7a4 <_ZN21PulseSensorPlaygroundC1Ei>
 23fe79c:	1007ae54 	.word	0x1007ae54
 23fe7a0:	1007ae64 	.word	0x1007ae64

023fe7a4 <_ZN21PulseSensorPlaygroundC1Ei>:

// Define the "this" pointer for the ISR
PulseSensorPlayground *PulseSensorPlayground::OurThis;


PulseSensorPlayground::PulseSensorPlayground(int numberOfSensors) {
 23fe7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe7a8:	460d      	mov	r5, r1
 23fe7aa:	4604      	mov	r4, r0
  // Save a static pointer to our playground so the ISR can read it.
  OurThis = this;

  // Dynamically create the array to minimize ram usage.
  SensorCount = (byte) numberOfSensors;
  Sensors = new PulseSensor[SensorCount];
 23fe7ac:	f04f 0870 	mov.w	r8, #112	; 0x70
PulseSensorPlayground::PulseSensorPlayground(int numberOfSensors) {
 23fe7b0:	3010      	adds	r0, #16
 23fe7b2:	f000 f8e0 	bl	23fe976 <_ZN23PulseSensorSerialOutputC1Ev>
  OurThis = this;
 23fe7b6:	4b0b      	ldr	r3, [pc, #44]	; (23fe7e4 <_ZN21PulseSensorPlaygroundC1Ei+0x40>)
  SensorCount = (byte) numberOfSensors;
 23fe7b8:	7065      	strb	r5, [r4, #1]
  Sensors = new PulseSensor[SensorCount];
 23fe7ba:	b2ed      	uxtb	r5, r5
 23fe7bc:	fb08 f005 	mul.w	r0, r8, r5
  OurThis = this;
 23fe7c0:	601c      	str	r4, [r3, #0]
  Sensors = new PulseSensor[SensorCount];
 23fe7c2:	f7ff fed6 	bl	23fe572 <_Znaj>
 23fe7c6:	4606      	mov	r6, r0
 23fe7c8:	b140      	cbz	r0, 23fe7dc <_ZN21PulseSensorPlaygroundC1Ei+0x38>
 23fe7ca:	2700      	movs	r7, #0
 23fe7cc:	42af      	cmp	r7, r5
 23fe7ce:	fb08 6007 	mla	r0, r8, r7, r6
 23fe7d2:	d003      	beq.n	23fe7dc <_ZN21PulseSensorPlaygroundC1Ei+0x38>
 23fe7d4:	f000 f888 	bl	23fe8e8 <_ZN11PulseSensorC1Ev>
 23fe7d8:	3701      	adds	r7, #1
 23fe7da:	e7f7      	b.n	23fe7cc <_ZN21PulseSensorPlaygroundC1Ei+0x28>

#if PULSE_SENSOR_TIMING_ANALYSIS
  // We want sample timing analysis, so we construct it.
  pTiming = new PulseSensorTimingStatistics(MICROS_PER_READ, 500 * 30L);
#endif // PULSE_SENSOR_TIMING_ANALYSIS
}
 23fe7dc:	4620      	mov	r0, r4
  Sensors = new PulseSensor[SensorCount];
 23fe7de:	6066      	str	r6, [r4, #4]
}
 23fe7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe7e4:	1007ae7c 	.word	0x1007ae7c

023fe7e8 <_ZN21PulseSensorPlayground5beginEv>:

boolean PulseSensorPlayground::PulseSensorPlayground::begin() {
 23fe7e8:	b570      	push	{r4, r5, r6, lr}
 23fe7ea:	4604      	mov	r4, r0

  for (int i = 0; i < SensorCount; ++i) {
 23fe7ec:	2500      	movs	r5, #0
    Sensors[i].initializeLEDs();
 23fe7ee:	2670      	movs	r6, #112	; 0x70
  for (int i = 0; i < SensorCount; ++i) {
 23fe7f0:	7863      	ldrb	r3, [r4, #1]
 23fe7f2:	42ab      	cmp	r3, r5
 23fe7f4:	dd06      	ble.n	23fe804 <_ZN21PulseSensorPlayground5beginEv+0x1c>
    Sensors[i].initializeLEDs();
 23fe7f6:	6860      	ldr	r0, [r4, #4]
 23fe7f8:	fb06 0005 	mla	r0, r6, r5, r0
 23fe7fc:	f000 f8a0 	bl	23fe940 <_ZN11PulseSensor14initializeLEDsEv>
  for (int i = 0; i < SensorCount; ++i) {
 23fe800:	3501      	adds	r5, #1
 23fe802:	e7f5      	b.n	23fe7f0 <_ZN21PulseSensorPlayground5beginEv+0x8>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fe804:	f000 f8d8 	bl	23fe9b8 <HAL_Timer_Get_Micro_Seconds>
  }

  // Note the time, for non-interrupt sampling and for timing statistics.
  NextSampleMicros = micros() + MICROS_PER_READ;

  SawNewSample = false;
 23fe808:	2300      	movs	r3, #0
  NextSampleMicros = micros() + MICROS_PER_READ;
 23fe80a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
	Paused = false;
 23fe80e:	7023      	strb	r3, [r4, #0]
  NextSampleMicros = micros() + MICROS_PER_READ;
 23fe810:	60a0      	str	r0, [r4, #8]
  SawNewSample = false;
 23fe812:	7323      	strb	r3, [r4, #12]
  printMemoryUsage();
  for (;;);
#endif // PULSE_SENSOR_MEMORY_USAGE

  // Lastly, set up and turn on the interrupts.
  if (UsingInterrupts) {
 23fe814:	4b05      	ldr	r3, [pc, #20]	; (23fe82c <_ZN21PulseSensorPlayground5beginEv+0x44>)
 23fe816:	781b      	ldrb	r3, [r3, #0]
 23fe818:	b90b      	cbnz	r3, 23fe81e <_ZN21PulseSensorPlayground5beginEv+0x36>
			Paused = true;
      return false;
    }
  }
  // pinMode(timingPin,OUTPUT);
  return true;
 23fe81a:	2001      	movs	r0, #1
}
 23fe81c:	bd70      	pop	{r4, r5, r6, pc}
    if (!PulseSensorPlaygroundSetupInterrupt()) {
 23fe81e:	f7ff feb4 	bl	23fe58a <_Z35PulseSensorPlaygroundSetupInterruptv>
 23fe822:	2800      	cmp	r0, #0
 23fe824:	d1f9      	bne.n	23fe81a <_ZN21PulseSensorPlayground5beginEv+0x32>
			Paused = true;
 23fe826:	2301      	movs	r3, #1
 23fe828:	7023      	strb	r3, [r4, #0]
      return false;
 23fe82a:	e7f7      	b.n	23fe81c <_ZN21PulseSensorPlayground5beginEv+0x34>
 23fe82c:	1007ad9c 	.word	0x1007ad9c

023fe830 <_ZN21PulseSensorPlayground11analogInputEii>:

void PulseSensorPlayground::analogInput(int inputPin, int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
 23fe830:	2a00      	cmp	r2, #0
 23fe832:	db08      	blt.n	23fe846 <_ZN21PulseSensorPlayground11analogInputEii+0x16>
 23fe834:	7843      	ldrb	r3, [r0, #1]
 23fe836:	4293      	cmp	r3, r2
 23fe838:	db05      	blt.n	23fe846 <_ZN21PulseSensorPlayground11analogInputEii+0x16>
    return; // out of range.
  }
  Sensors[sensorIndex].analogInput(inputPin);
 23fe83a:	6843      	ldr	r3, [r0, #4]
 23fe83c:	2070      	movs	r0, #112	; 0x70
 23fe83e:	fb00 3002 	mla	r0, r0, r2, r3
 23fe842:	f000 b85f 	b.w	23fe904 <_ZN11PulseSensor11analogInputEi>
}
 23fe846:	4770      	bx	lr

023fe848 <_ZN21PulseSensorPlayground12blinkOnPulseEii>:

void PulseSensorPlayground::blinkOnPulse(int blinkPin, int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
 23fe848:	2a00      	cmp	r2, #0
 23fe84a:	db08      	blt.n	23fe85e <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x16>
 23fe84c:	7843      	ldrb	r3, [r0, #1]
 23fe84e:	4293      	cmp	r3, r2
 23fe850:	db05      	blt.n	23fe85e <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x16>
    return; // out of range.
  }
  Sensors[sensorIndex].blinkOnPulse(blinkPin);
 23fe852:	6843      	ldr	r3, [r0, #4]
 23fe854:	2070      	movs	r0, #112	; 0x70
 23fe856:	fb00 3002 	mla	r0, r0, r2, r3
 23fe85a:	f000 b855 	b.w	23fe908 <_ZN11PulseSensor12blinkOnPulseEi>
}
 23fe85e:	4770      	bx	lr

023fe860 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi>:
  }
  return Sensors[sensorIndex].getLatestSample();
}

int PulseSensorPlayground::getBeatsPerMinute(int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
 23fe860:	2900      	cmp	r1, #0
 23fe862:	db08      	blt.n	23fe876 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi+0x16>
 23fe864:	7843      	ldrb	r3, [r0, #1]
 23fe866:	428b      	cmp	r3, r1
 23fe868:	db05      	blt.n	23fe876 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi+0x16>
    return -1; // out of range.
  }
  return Sensors[sensorIndex].getBeatsPerMinute();
 23fe86a:	6843      	ldr	r3, [r0, #4]
 23fe86c:	2070      	movs	r0, #112	; 0x70
 23fe86e:	fb00 3001 	mla	r0, r0, r1, r3
 23fe872:	f000 b857 	b.w	23fe924 <_ZN11PulseSensor17getBeatsPerMinuteEv>
}
 23fe876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe87a:	4770      	bx	lr

023fe87c <_ZN21PulseSensorPlayground14sawStartOfBeatEi>:
  }
  return Sensors[sensorIndex].getInterBeatIntervalMs();
}

boolean PulseSensorPlayground::sawStartOfBeat(int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
 23fe87c:	2900      	cmp	r1, #0
 23fe87e:	db08      	blt.n	23fe892 <_ZN21PulseSensorPlayground14sawStartOfBeatEi+0x16>
 23fe880:	7843      	ldrb	r3, [r0, #1]
 23fe882:	428b      	cmp	r3, r1
 23fe884:	db05      	blt.n	23fe892 <_ZN21PulseSensorPlayground14sawStartOfBeatEi+0x16>
    return false; // out of range.
  }
  return Sensors[sensorIndex].sawStartOfBeat();
 23fe886:	6843      	ldr	r3, [r0, #4]
 23fe888:	2070      	movs	r0, #112	; 0x70
 23fe88a:	fb00 3001 	mla	r0, r0, r1, r3
 23fe88e:	f000 b84b 	b.w	23fe928 <_ZN11PulseSensor14sawStartOfBeatEv>
}
 23fe892:	2000      	movs	r0, #0
 23fe894:	4770      	bx	lr

023fe896 <_ZN21PulseSensorPlayground12setThresholdEii>:
  }
  return Sensors[sensorIndex].isInsideBeat();
}

void PulseSensorPlayground::setThreshold(int threshold, int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
 23fe896:	2a00      	cmp	r2, #0
 23fe898:	db08      	blt.n	23fe8ac <_ZN21PulseSensorPlayground12setThresholdEii+0x16>
 23fe89a:	7843      	ldrb	r3, [r0, #1]
 23fe89c:	4293      	cmp	r3, r2
 23fe89e:	db05      	blt.n	23fe8ac <_ZN21PulseSensorPlayground12setThresholdEii+0x16>
    return; // out of range.
  }
  Sensors[sensorIndex].setThreshold(threshold);
 23fe8a0:	6843      	ldr	r3, [r0, #4]
 23fe8a2:	2070      	movs	r0, #112	; 0x70
 23fe8a4:	fb00 3002 	mla	r0, r0, r2, r3
 23fe8a8:	f000 b830 	b.w	23fe90c <_ZN11PulseSensor12setThresholdEi>
}
 23fe8ac:	4770      	bx	lr

023fe8ae <_ZN11PulseSensor14resetVariablesEv>:
	resetVariables();
}

void PulseSensor::resetVariables(){
	for (int i = 0; i < 10; ++i) {
    rate[i] = 0;
 23fe8ae:	2228      	movs	r2, #40	; 0x28
void PulseSensor::resetVariables(){
 23fe8b0:	b510      	push	{r4, lr}
    rate[i] = 0;
 23fe8b2:	2100      	movs	r1, #0
void PulseSensor::resetVariables(){
 23fe8b4:	4604      	mov	r4, r0
    rate[i] = 0;
 23fe8b6:	3030      	adds	r0, #48	; 0x30
 23fe8b8:	f001 f9c5 	bl	23ffc46 <memset>
  }
  QS = false;
 23fe8bc:	2300      	movs	r3, #0
  BPM = 0;
  IBI = 750;                  // 750ms per beat = 80 Beats Per Minute (BPM)
 23fe8be:	f240 22ee 	movw	r2, #750	; 0x2ee
  QS = false;
 23fe8c2:	7663      	strb	r3, [r4, #25]
  BPM = 0;
 23fe8c4:	60e3      	str	r3, [r4, #12]
  IBI = 750;                  // 750ms per beat = 80 Beats Per Minute (BPM)
 23fe8c6:	6162      	str	r2, [r4, #20]
  Pulse = false;
  sampleCounter = 0;
  lastBeatTime = 0;
  P = 512;                    // peak at 1/2 the input range of 0..1023
 23fe8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
  Pulse = false;
 23fe8cc:	7623      	strb	r3, [r4, #24]
  lastBeatTime = 0;
 23fe8ce:	62a3      	str	r3, [r4, #40]	; 0x28
  T = 512;                    // trough at 1/2 the input range.
 23fe8d0:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
  thresh = threshSetting;     // reset the thresh variable with user defined THRESHOLD
 23fe8d4:	6a22      	ldr	r2, [r4, #32]
  sampleCounter = 0;
 23fe8d6:	65a3      	str	r3, [r4, #88]	; 0x58
  thresh = threshSetting;     // reset the thresh variable with user defined THRESHOLD
 23fe8d8:	66a2      	str	r2, [r4, #104]	; 0x68
  amp = 100;                  // beat amplitude 1/10 of input range.
 23fe8da:	2264      	movs	r2, #100	; 0x64
 23fe8dc:	6262      	str	r2, [r4, #36]	; 0x24
  firstBeat = true;           // looking for the first beat
 23fe8de:	2201      	movs	r2, #1
  secondBeat = false;         // not yet looking for the second beat in a row
  FadeLevel = 0; // LED is dark.
 23fe8e0:	61e3      	str	r3, [r4, #28]
  firstBeat = true;           // looking for the first beat
 23fe8e2:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
}
 23fe8e6:	bd10      	pop	{r4, pc}

023fe8e8 <_ZN11PulseSensorC1Ev>:
  BlinkPin = -1;
 23fe8e8:	220b      	movs	r2, #11
 23fe8ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
PulseSensor::PulseSensor() {
 23fe8ee:	b510      	push	{r4, lr}
  BlinkPin = -1;
 23fe8f0:	e9c0 2300 	strd	r2, r3, [r0]
  FadePin = -1;
 23fe8f4:	6083      	str	r3, [r0, #8]
  sampleIntervalMs = PulseSensorPlayground::MICROS_PER_READ / 1000;
 23fe8f6:	2302      	movs	r3, #2
PulseSensor::PulseSensor() {
 23fe8f8:	4604      	mov	r4, r0
  sampleIntervalMs = PulseSensorPlayground::MICROS_PER_READ / 1000;
 23fe8fa:	62c3      	str	r3, [r0, #44]	; 0x2c
	resetVariables();
 23fe8fc:	f7ff ffd7 	bl	23fe8ae <_ZN11PulseSensor14resetVariablesEv>
}
 23fe900:	4620      	mov	r0, r4
 23fe902:	bd10      	pop	{r4, pc}

023fe904 <_ZN11PulseSensor11analogInputEi>:

void PulseSensor::analogInput(int inputPin) {
  InputPin = inputPin;
 23fe904:	6001      	str	r1, [r0, #0]
}
 23fe906:	4770      	bx	lr

023fe908 <_ZN11PulseSensor12blinkOnPulseEi>:

void PulseSensor::blinkOnPulse(int blinkPin) {
  BlinkPin = blinkPin;
 23fe908:	6041      	str	r1, [r0, #4]
}
 23fe90a:	4770      	bx	lr

023fe90c <_ZN11PulseSensor12setThresholdEi>:

void PulseSensor::fadeOnPulse(int fadePin) {
  FadePin = fadePin;
}

void PulseSensor::setThreshold(int threshold) {
 23fe90c:	b538      	push	{r3, r4, r5, lr}
 23fe90e:	4604      	mov	r4, r0
 23fe910:	460d      	mov	r5, r1
  DISABLE_PULSE_SENSOR_INTERRUPTS;
 23fe912:	f000 f86d 	bl	23fe9f0 <HAL_disable_irq>
  threshSetting = threshold; // this is the backup we get from the main .ino
 23fe916:	6225      	str	r5, [r4, #32]
  thresh = threshold; // this is the one that updates in software
 23fe918:	66a5      	str	r5, [r4, #104]	; 0x68
  ENABLE_PULSE_SENSOR_INTERRUPTS;
 23fe91a:	2000      	movs	r0, #0
}
 23fe91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ENABLE_PULSE_SENSOR_INTERRUPTS;
 23fe920:	f000 b874 	b.w	23fea0c <HAL_enable_irq>

023fe924 <_ZN11PulseSensor17getBeatsPerMinuteEv>:
int PulseSensor::getLatestSample() {
  return Signal;
}

int PulseSensor::getBeatsPerMinute() {
  return BPM;
 23fe924:	68c0      	ldr	r0, [r0, #12]
}
 23fe926:	4770      	bx	lr

023fe928 <_ZN11PulseSensor14sawStartOfBeatEv>:

unsigned long PulseSensor::getLastBeatTime() {
  return lastBeatTime;
}

boolean PulseSensor::sawStartOfBeat() {
 23fe928:	b538      	push	{r3, r4, r5, lr}
 23fe92a:	4604      	mov	r4, r0
  // Disable interrupts to avoid a race with the ISR.
  DISABLE_PULSE_SENSOR_INTERRUPTS;
 23fe92c:	f000 f860 	bl	23fe9f0 <HAL_disable_irq>
  boolean started = QS;
  QS = false;
 23fe930:	2000      	movs	r0, #0
  boolean started = QS;
 23fe932:	7e65      	ldrb	r5, [r4, #25]
  QS = false;
 23fe934:	7660      	strb	r0, [r4, #25]
  boolean started = QS;
 23fe936:	b2ed      	uxtb	r5, r5
  ENABLE_PULSE_SENSOR_INTERRUPTS;
 23fe938:	f000 f868 	bl	23fea0c <HAL_enable_irq>

  return started;
}
 23fe93c:	4628      	mov	r0, r5
 23fe93e:	bd38      	pop	{r3, r4, r5, pc}

023fe940 <_ZN11PulseSensor14initializeLEDsEv>:
    amp = 100;                  // beat amplitude 1/10 of input range.

  }
}

void PulseSensor::initializeLEDs() {
 23fe940:	b510      	push	{r4, lr}
 23fe942:	4604      	mov	r4, r0
  if (BlinkPin >= 0) {
 23fe944:	6840      	ldr	r0, [r0, #4]
 23fe946:	2800      	cmp	r0, #0
 23fe948:	db07      	blt.n	23fe95a <_ZN11PulseSensor14initializeLEDsEv+0x1a>
    pinMode(BlinkPin, OUTPUT);
 23fe94a:	2101      	movs	r1, #1
 23fe94c:	b280      	uxth	r0, r0
 23fe94e:	f001 f815 	bl	23ff97c <pinMode>
    digitalWrite(BlinkPin, LOW);
 23fe952:	2100      	movs	r1, #0
 23fe954:	88a0      	ldrh	r0, [r4, #4]
 23fe956:	f001 f822 	bl	23ff99e <digitalWrite>
  }
  if (FadePin >= 0) {
 23fe95a:	68a0      	ldr	r0, [r4, #8]
 23fe95c:	2800      	cmp	r0, #0
 23fe95e:	db09      	blt.n	23fe974 <_ZN11PulseSensor14initializeLEDsEv+0x34>
    pinMode(FadePin, OUTPUT);
 23fe960:	2101      	movs	r1, #1
 23fe962:	b280      	uxth	r0, r0
 23fe964:	f001 f80a 	bl	23ff97c <pinMode>
    analogWrite(FadePin, 0); // turn off the LED.
 23fe968:	8920      	ldrh	r0, [r4, #8]
 23fe96a:	2100      	movs	r1, #0
  }
}
 23fe96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    analogWrite(FadePin, 0); // turn off the LED.
 23fe970:	f001 b82e 	b.w	23ff9d0 <_Z11analogWritetm>
}
 23fe974:	bd10      	pop	{r4, pc}

023fe976 <_ZN23PulseSensorSerialOutputC1Ev>:

#include "PulseSensorSerialOutput.h"

PulseSensorSerialOutput::PulseSensorSerialOutput() {
  pOutput = NULL;
  OutputType = SERIAL_PLOTTER;
 23fe976:	2100      	movs	r1, #0
 23fe978:	2202      	movs	r2, #2
 23fe97a:	e9c0 1200 	strd	r1, r2, [r0]
}
 23fe97e:	4770      	bx	lr

023fe980 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe980:	b509      	push	{r0, r3, lr}
 23fe982:	4804      	ldr	r0, [pc, #16]	; (23fe994 <os_mutex_recursive_create+0x14>)
 23fe984:	6800      	ldr	r0, [r0, #0]
 23fe986:	4b04      	ldr	r3, [pc, #16]	; (23fe998 <os_mutex_recursive_create+0x18>)
 23fe988:	4403      	add	r3, r0
 23fe98a:	681b      	ldr	r3, [r3, #0]
 23fe98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe98e:	9302      	str	r3, [sp, #8]
 23fe990:	bd09      	pop	{r0, r3, pc}
 23fe992:	0000      	.short	0x0000
 23fe994:	1007ad94 	.word	0x1007ad94
 23fe998:	00000030 	.word	0x00000030

023fe99c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe99c:	b509      	push	{r0, r3, lr}
 23fe99e:	4804      	ldr	r0, [pc, #16]	; (23fe9b0 <HAL_RNG_GetRandomNumber+0x14>)
 23fe9a0:	6800      	ldr	r0, [r0, #0]
 23fe9a2:	4b04      	ldr	r3, [pc, #16]	; (23fe9b4 <HAL_RNG_GetRandomNumber+0x18>)
 23fe9a4:	4403      	add	r3, r0
 23fe9a6:	681b      	ldr	r3, [r3, #0]
 23fe9a8:	685b      	ldr	r3, [r3, #4]
 23fe9aa:	9302      	str	r3, [sp, #8]
 23fe9ac:	bd09      	pop	{r0, r3, pc}
 23fe9ae:	0000      	.short	0x0000
 23fe9b0:	1007ad94 	.word	0x1007ad94
 23fe9b4:	00000000 	.word	0x00000000

023fe9b8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fe9b8:	b509      	push	{r0, r3, lr}
 23fe9ba:	4804      	ldr	r0, [pc, #16]	; (23fe9cc <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fe9bc:	6800      	ldr	r0, [r0, #0]
 23fe9be:	4b04      	ldr	r3, [pc, #16]	; (23fe9d0 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fe9c0:	4403      	add	r3, r0
 23fe9c2:	681b      	ldr	r3, [r3, #0]
 23fe9c4:	691b      	ldr	r3, [r3, #16]
 23fe9c6:	9302      	str	r3, [sp, #8]
 23fe9c8:	bd09      	pop	{r0, r3, pc}
 23fe9ca:	0000      	.short	0x0000
 23fe9cc:	1007ad94 	.word	0x1007ad94
 23fe9d0:	00000000 	.word	0x00000000

023fe9d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe9d4:	b509      	push	{r0, r3, lr}
 23fe9d6:	4804      	ldr	r0, [pc, #16]	; (23fe9e8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe9d8:	6800      	ldr	r0, [r0, #0]
 23fe9da:	4b04      	ldr	r3, [pc, #16]	; (23fe9ec <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe9dc:	4403      	add	r3, r0
 23fe9de:	681b      	ldr	r3, [r3, #0]
 23fe9e0:	695b      	ldr	r3, [r3, #20]
 23fe9e2:	9302      	str	r3, [sp, #8]
 23fe9e4:	bd09      	pop	{r0, r3, pc}
 23fe9e6:	0000      	.short	0x0000
 23fe9e8:	1007ad94 	.word	0x1007ad94
 23fe9ec:	00000000 	.word	0x00000000

023fe9f0 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 23fe9f0:	b509      	push	{r0, r3, lr}
 23fe9f2:	4804      	ldr	r0, [pc, #16]	; (23fea04 <HAL_disable_irq+0x14>)
 23fe9f4:	6800      	ldr	r0, [r0, #0]
 23fe9f6:	4b04      	ldr	r3, [pc, #16]	; (23fea08 <HAL_disable_irq+0x18>)
 23fe9f8:	4403      	add	r3, r0
 23fe9fa:	681b      	ldr	r3, [r3, #0]
 23fe9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fe9fe:	9302      	str	r3, [sp, #8]
 23fea00:	bd09      	pop	{r0, r3, pc}
 23fea02:	0000      	.short	0x0000
 23fea04:	1007ad94 	.word	0x1007ad94
 23fea08:	00000000 	.word	0x00000000

023fea0c <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 23fea0c:	b509      	push	{r0, r3, lr}
 23fea0e:	4804      	ldr	r0, [pc, #16]	; (23fea20 <HAL_enable_irq+0x14>)
 23fea10:	6800      	ldr	r0, [r0, #0]
 23fea12:	4b04      	ldr	r3, [pc, #16]	; (23fea24 <HAL_enable_irq+0x18>)
 23fea14:	4403      	add	r3, r0
 23fea16:	681b      	ldr	r3, [r3, #0]
 23fea18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fea1a:	9302      	str	r3, [sp, #8]
 23fea1c:	bd09      	pop	{r0, r3, pc}
 23fea1e:	0000      	.short	0x0000
 23fea20:	1007ad94 	.word	0x1007ad94
 23fea24:	00000000 	.word	0x00000000

023fea28 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fea28:	b509      	push	{r0, r3, lr}
 23fea2a:	4804      	ldr	r0, [pc, #16]	; (23fea3c <hal_pin_validate_function+0x14>)
 23fea2c:	6800      	ldr	r0, [r0, #0]
 23fea2e:	4b04      	ldr	r3, [pc, #16]	; (23fea40 <hal_pin_validate_function+0x18>)
 23fea30:	4403      	add	r3, r0
 23fea32:	681b      	ldr	r3, [r3, #0]
 23fea34:	685b      	ldr	r3, [r3, #4]
 23fea36:	9302      	str	r3, [sp, #8]
 23fea38:	bd09      	pop	{r0, r3, pc}
 23fea3a:	0000      	.short	0x0000
 23fea3c:	1007ad94 	.word	0x1007ad94
 23fea40:	00000014 	.word	0x00000014

023fea44 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fea44:	b509      	push	{r0, r3, lr}
 23fea46:	4804      	ldr	r0, [pc, #16]	; (23fea58 <hal_gpio_mode+0x14>)
 23fea48:	6800      	ldr	r0, [r0, #0]
 23fea4a:	4b04      	ldr	r3, [pc, #16]	; (23fea5c <hal_gpio_mode+0x18>)
 23fea4c:	4403      	add	r3, r0
 23fea4e:	681b      	ldr	r3, [r3, #0]
 23fea50:	689b      	ldr	r3, [r3, #8]
 23fea52:	9302      	str	r3, [sp, #8]
 23fea54:	bd09      	pop	{r0, r3, pc}
 23fea56:	0000      	.short	0x0000
 23fea58:	1007ad94 	.word	0x1007ad94
 23fea5c:	00000014 	.word	0x00000014

023fea60 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fea60:	b509      	push	{r0, r3, lr}
 23fea62:	4804      	ldr	r0, [pc, #16]	; (23fea74 <hal_gpio_get_mode+0x14>)
 23fea64:	6800      	ldr	r0, [r0, #0]
 23fea66:	4b04      	ldr	r3, [pc, #16]	; (23fea78 <hal_gpio_get_mode+0x18>)
 23fea68:	4403      	add	r3, r0
 23fea6a:	681b      	ldr	r3, [r3, #0]
 23fea6c:	68db      	ldr	r3, [r3, #12]
 23fea6e:	9302      	str	r3, [sp, #8]
 23fea70:	bd09      	pop	{r0, r3, pc}
 23fea72:	0000      	.short	0x0000
 23fea74:	1007ad94 	.word	0x1007ad94
 23fea78:	00000014 	.word	0x00000014

023fea7c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fea7c:	b509      	push	{r0, r3, lr}
 23fea7e:	4804      	ldr	r0, [pc, #16]	; (23fea90 <hal_gpio_write+0x14>)
 23fea80:	6800      	ldr	r0, [r0, #0]
 23fea82:	4b04      	ldr	r3, [pc, #16]	; (23fea94 <hal_gpio_write+0x18>)
 23fea84:	4403      	add	r3, r0
 23fea86:	681b      	ldr	r3, [r3, #0]
 23fea88:	691b      	ldr	r3, [r3, #16]
 23fea8a:	9302      	str	r3, [sp, #8]
 23fea8c:	bd09      	pop	{r0, r3, pc}
 23fea8e:	0000      	.short	0x0000
 23fea90:	1007ad94 	.word	0x1007ad94
 23fea94:	00000014 	.word	0x00000014

023fea98 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
 23fea98:	b509      	push	{r0, r3, lr}
 23fea9a:	4804      	ldr	r0, [pc, #16]	; (23feaac <HAL_DAC_Write+0x14>)
 23fea9c:	6800      	ldr	r0, [r0, #0]
 23fea9e:	4b04      	ldr	r3, [pc, #16]	; (23feab0 <HAL_DAC_Write+0x18>)
 23feaa0:	4403      	add	r3, r0
 23feaa2:	681b      	ldr	r3, [r3, #0]
 23feaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23feaa6:	9302      	str	r3, [sp, #8]
 23feaa8:	bd09      	pop	{r0, r3, pc}
 23feaaa:	0000      	.short	0x0000
 23feaac:	1007ad94 	.word	0x1007ad94
 23feab0:	00000014 	.word	0x00000014

023feab4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 23feab4:	b509      	push	{r0, r3, lr}
 23feab6:	4804      	ldr	r0, [pc, #16]	; (23feac8 <hal_pwm_write_ext+0x14>)
 23feab8:	6800      	ldr	r0, [r0, #0]
 23feaba:	4b04      	ldr	r3, [pc, #16]	; (23feacc <hal_pwm_write_ext+0x18>)
 23feabc:	4403      	add	r3, r0
 23feabe:	681b      	ldr	r3, [r3, #0]
 23feac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 23feac2:	9302      	str	r3, [sp, #8]
 23feac4:	bd09      	pop	{r0, r3, pc}
 23feac6:	0000      	.short	0x0000
 23feac8:	1007ad94 	.word	0x1007ad94
 23feacc:	00000014 	.word	0x00000014

023fead0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fead0:	b509      	push	{r0, r3, lr}
 23fead2:	4804      	ldr	r0, [pc, #16]	; (23feae4 <hal_i2c_write+0x14>)
 23fead4:	6800      	ldr	r0, [r0, #0]
 23fead6:	4b04      	ldr	r3, [pc, #16]	; (23feae8 <hal_i2c_write+0x18>)
 23fead8:	4403      	add	r3, r0
 23feada:	681b      	ldr	r3, [r3, #0]
 23feadc:	6a1b      	ldr	r3, [r3, #32]
 23feade:	9302      	str	r3, [sp, #8]
 23feae0:	bd09      	pop	{r0, r3, pc}
 23feae2:	0000      	.short	0x0000
 23feae4:	1007ad94 	.word	0x1007ad94
 23feae8:	00000010 	.word	0x00000010

023feaec <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23feaec:	b509      	push	{r0, r3, lr}
 23feaee:	4804      	ldr	r0, [pc, #16]	; (23feb00 <hal_i2c_available+0x14>)
 23feaf0:	6800      	ldr	r0, [r0, #0]
 23feaf2:	4b04      	ldr	r3, [pc, #16]	; (23feb04 <hal_i2c_available+0x18>)
 23feaf4:	4403      	add	r3, r0
 23feaf6:	681b      	ldr	r3, [r3, #0]
 23feaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23feafa:	9302      	str	r3, [sp, #8]
 23feafc:	bd09      	pop	{r0, r3, pc}
 23feafe:	0000      	.short	0x0000
 23feb00:	1007ad94 	.word	0x1007ad94
 23feb04:	00000010 	.word	0x00000010

023feb08 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23feb08:	b509      	push	{r0, r3, lr}
 23feb0a:	4804      	ldr	r0, [pc, #16]	; (23feb1c <hal_i2c_read+0x14>)
 23feb0c:	6800      	ldr	r0, [r0, #0]
 23feb0e:	4b04      	ldr	r3, [pc, #16]	; (23feb20 <hal_i2c_read+0x18>)
 23feb10:	4403      	add	r3, r0
 23feb12:	681b      	ldr	r3, [r3, #0]
 23feb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23feb16:	9302      	str	r3, [sp, #8]
 23feb18:	bd09      	pop	{r0, r3, pc}
 23feb1a:	0000      	.short	0x0000
 23feb1c:	1007ad94 	.word	0x1007ad94
 23feb20:	00000010 	.word	0x00000010

023feb24 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23feb24:	b509      	push	{r0, r3, lr}
 23feb26:	4804      	ldr	r0, [pc, #16]	; (23feb38 <hal_i2c_peek+0x14>)
 23feb28:	6800      	ldr	r0, [r0, #0]
 23feb2a:	4b04      	ldr	r3, [pc, #16]	; (23feb3c <hal_i2c_peek+0x18>)
 23feb2c:	4403      	add	r3, r0
 23feb2e:	681b      	ldr	r3, [r3, #0]
 23feb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23feb32:	9302      	str	r3, [sp, #8]
 23feb34:	bd09      	pop	{r0, r3, pc}
 23feb36:	0000      	.short	0x0000
 23feb38:	1007ad94 	.word	0x1007ad94
 23feb3c:	00000010 	.word	0x00000010

023feb40 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23feb40:	b509      	push	{r0, r3, lr}
 23feb42:	4804      	ldr	r0, [pc, #16]	; (23feb54 <hal_i2c_flush+0x14>)
 23feb44:	6800      	ldr	r0, [r0, #0]
 23feb46:	4b04      	ldr	r3, [pc, #16]	; (23feb58 <hal_i2c_flush+0x18>)
 23feb48:	4403      	add	r3, r0
 23feb4a:	681b      	ldr	r3, [r3, #0]
 23feb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23feb4e:	9302      	str	r3, [sp, #8]
 23feb50:	bd09      	pop	{r0, r3, pc}
 23feb52:	0000      	.short	0x0000
 23feb54:	1007ad94 	.word	0x1007ad94
 23feb58:	00000010 	.word	0x00000010

023feb5c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23feb5c:	b509      	push	{r0, r3, lr}
 23feb5e:	4804      	ldr	r0, [pc, #16]	; (23feb70 <hal_i2c_is_enabled+0x14>)
 23feb60:	6800      	ldr	r0, [r0, #0]
 23feb62:	4b04      	ldr	r3, [pc, #16]	; (23feb74 <hal_i2c_is_enabled+0x18>)
 23feb64:	4403      	add	r3, r0
 23feb66:	681b      	ldr	r3, [r3, #0]
 23feb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23feb6a:	9302      	str	r3, [sp, #8]
 23feb6c:	bd09      	pop	{r0, r3, pc}
 23feb6e:	0000      	.short	0x0000
 23feb70:	1007ad94 	.word	0x1007ad94
 23feb74:	00000010 	.word	0x00000010

023feb78 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23feb78:	b509      	push	{r0, r3, lr}
 23feb7a:	4804      	ldr	r0, [pc, #16]	; (23feb8c <hal_i2c_init+0x14>)
 23feb7c:	6800      	ldr	r0, [r0, #0]
 23feb7e:	4b04      	ldr	r3, [pc, #16]	; (23feb90 <hal_i2c_init+0x18>)
 23feb80:	4403      	add	r3, r0
 23feb82:	681b      	ldr	r3, [r3, #0]
 23feb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23feb86:	9302      	str	r3, [sp, #8]
 23feb88:	bd09      	pop	{r0, r3, pc}
 23feb8a:	0000      	.short	0x0000
 23feb8c:	1007ad94 	.word	0x1007ad94
 23feb90:	00000010 	.word	0x00000010

023feb94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23feb94:	b509      	push	{r0, r3, lr}
 23feb96:	4804      	ldr	r0, [pc, #16]	; (23feba8 <inet_inet_ntop+0x14>)
 23feb98:	6800      	ldr	r0, [r0, #0]
 23feb9a:	4b04      	ldr	r3, [pc, #16]	; (23febac <inet_inet_ntop+0x18>)
 23feb9c:	4403      	add	r3, r0
 23feb9e:	681b      	ldr	r3, [r3, #0]
 23feba0:	695b      	ldr	r3, [r3, #20]
 23feba2:	9302      	str	r3, [sp, #8]
 23feba4:	bd09      	pop	{r0, r3, pc}
 23feba6:	0000      	.short	0x0000
 23feba8:	1007ad94 	.word	0x1007ad94
 23febac:	0000004c 	.word	0x0000004c

023febb0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23febb0:	b509      	push	{r0, r3, lr}
 23febb2:	4804      	ldr	r0, [pc, #16]	; (23febc4 <netdb_freeaddrinfo+0x14>)
 23febb4:	6800      	ldr	r0, [r0, #0]
 23febb6:	4b04      	ldr	r3, [pc, #16]	; (23febc8 <netdb_freeaddrinfo+0x18>)
 23febb8:	4403      	add	r3, r0
 23febba:	681b      	ldr	r3, [r3, #0]
 23febbc:	689b      	ldr	r3, [r3, #8]
 23febbe:	9302      	str	r3, [sp, #8]
 23febc0:	bd09      	pop	{r0, r3, pc}
 23febc2:	0000      	.short	0x0000
 23febc4:	1007ad94 	.word	0x1007ad94
 23febc8:	00000050 	.word	0x00000050

023febcc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23febcc:	b509      	push	{r0, r3, lr}
 23febce:	4804      	ldr	r0, [pc, #16]	; (23febe0 <netdb_getaddrinfo+0x14>)
 23febd0:	6800      	ldr	r0, [r0, #0]
 23febd2:	4b04      	ldr	r3, [pc, #16]	; (23febe4 <netdb_getaddrinfo+0x18>)
 23febd4:	4403      	add	r3, r0
 23febd6:	681b      	ldr	r3, [r3, #0]
 23febd8:	68db      	ldr	r3, [r3, #12]
 23febda:	9302      	str	r3, [sp, #8]
 23febdc:	bd09      	pop	{r0, r3, pc}
 23febde:	0000      	.short	0x0000
 23febe0:	1007ad94 	.word	0x1007ad94
 23febe4:	00000050 	.word	0x00000050

023febe8 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 23febe8:	b509      	push	{r0, r3, lr}
 23febea:	4804      	ldr	r0, [pc, #16]	; (23febfc <HAL_Servo_Attach+0x14>)
 23febec:	6800      	ldr	r0, [r0, #0]
 23febee:	4b04      	ldr	r3, [pc, #16]	; (23fec00 <HAL_Servo_Attach+0x18>)
 23febf0:	4403      	add	r3, r0
 23febf2:	681b      	ldr	r3, [r3, #0]
 23febf4:	691b      	ldr	r3, [r3, #16]
 23febf6:	9302      	str	r3, [sp, #8]
 23febf8:	bd09      	pop	{r0, r3, pc}
 23febfa:	0000      	.short	0x0000
 23febfc:	1007ad94 	.word	0x1007ad94
 23fec00:	0000000c 	.word	0x0000000c

023fec04 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 23fec04:	b509      	push	{r0, r3, lr}
 23fec06:	4804      	ldr	r0, [pc, #16]	; (23fec18 <HAL_Servo_Detach+0x14>)
 23fec08:	6800      	ldr	r0, [r0, #0]
 23fec0a:	4b04      	ldr	r3, [pc, #16]	; (23fec1c <HAL_Servo_Detach+0x18>)
 23fec0c:	4403      	add	r3, r0
 23fec0e:	681b      	ldr	r3, [r3, #0]
 23fec10:	695b      	ldr	r3, [r3, #20]
 23fec12:	9302      	str	r3, [sp, #8]
 23fec14:	bd09      	pop	{r0, r3, pc}
 23fec16:	0000      	.short	0x0000
 23fec18:	1007ad94 	.word	0x1007ad94
 23fec1c:	0000000c 	.word	0x0000000c

023fec20 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fec20:	b509      	push	{r0, r3, lr}
 23fec22:	4804      	ldr	r0, [pc, #16]	; (23fec34 <hal_spi_init+0x14>)
 23fec24:	6800      	ldr	r0, [r0, #0]
 23fec26:	4b04      	ldr	r3, [pc, #16]	; (23fec38 <hal_spi_init+0x18>)
 23fec28:	4403      	add	r3, r0
 23fec2a:	681b      	ldr	r3, [r3, #0]
 23fec2c:	69db      	ldr	r3, [r3, #28]
 23fec2e:	9302      	str	r3, [sp, #8]
 23fec30:	bd09      	pop	{r0, r3, pc}
 23fec32:	0000      	.short	0x0000
 23fec34:	1007ad94 	.word	0x1007ad94
 23fec38:	00000018 	.word	0x00000018

023fec3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fec3c:	b509      	push	{r0, r3, lr}
 23fec3e:	4804      	ldr	r0, [pc, #16]	; (23fec50 <hal_spi_is_enabled+0x14>)
 23fec40:	6800      	ldr	r0, [r0, #0]
 23fec42:	4b04      	ldr	r3, [pc, #16]	; (23fec54 <hal_spi_is_enabled+0x18>)
 23fec44:	4403      	add	r3, r0
 23fec46:	681b      	ldr	r3, [r3, #0]
 23fec48:	6a1b      	ldr	r3, [r3, #32]
 23fec4a:	9302      	str	r3, [sp, #8]
 23fec4c:	bd09      	pop	{r0, r3, pc}
 23fec4e:	0000      	.short	0x0000
 23fec50:	1007ad94 	.word	0x1007ad94
 23fec54:	00000018 	.word	0x00000018

023fec58 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fec58:	b509      	push	{r0, r3, lr}
 23fec5a:	4804      	ldr	r0, [pc, #16]	; (23fec6c <hal_usart_write+0x14>)
 23fec5c:	6800      	ldr	r0, [r0, #0]
 23fec5e:	4b04      	ldr	r3, [pc, #16]	; (23fec70 <hal_usart_write+0x18>)
 23fec60:	4403      	add	r3, r0
 23fec62:	681b      	ldr	r3, [r3, #0]
 23fec64:	68db      	ldr	r3, [r3, #12]
 23fec66:	9302      	str	r3, [sp, #8]
 23fec68:	bd09      	pop	{r0, r3, pc}
 23fec6a:	0000      	.short	0x0000
 23fec6c:	1007ad94 	.word	0x1007ad94
 23fec70:	00000024 	.word	0x00000024

023fec74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fec74:	b509      	push	{r0, r3, lr}
 23fec76:	4804      	ldr	r0, [pc, #16]	; (23fec88 <hal_usart_available+0x14>)
 23fec78:	6800      	ldr	r0, [r0, #0]
 23fec7a:	4b04      	ldr	r3, [pc, #16]	; (23fec8c <hal_usart_available+0x18>)
 23fec7c:	4403      	add	r3, r0
 23fec7e:	681b      	ldr	r3, [r3, #0]
 23fec80:	691b      	ldr	r3, [r3, #16]
 23fec82:	9302      	str	r3, [sp, #8]
 23fec84:	bd09      	pop	{r0, r3, pc}
 23fec86:	0000      	.short	0x0000
 23fec88:	1007ad94 	.word	0x1007ad94
 23fec8c:	00000024 	.word	0x00000024

023fec90 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fec90:	b509      	push	{r0, r3, lr}
 23fec92:	4804      	ldr	r0, [pc, #16]	; (23feca4 <hal_usart_read+0x14>)
 23fec94:	6800      	ldr	r0, [r0, #0]
 23fec96:	4b04      	ldr	r3, [pc, #16]	; (23feca8 <hal_usart_read+0x18>)
 23fec98:	4403      	add	r3, r0
 23fec9a:	681b      	ldr	r3, [r3, #0]
 23fec9c:	695b      	ldr	r3, [r3, #20]
 23fec9e:	9302      	str	r3, [sp, #8]
 23feca0:	bd09      	pop	{r0, r3, pc}
 23feca2:	0000      	.short	0x0000
 23feca4:	1007ad94 	.word	0x1007ad94
 23feca8:	00000024 	.word	0x00000024

023fecac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fecac:	b509      	push	{r0, r3, lr}
 23fecae:	4804      	ldr	r0, [pc, #16]	; (23fecc0 <hal_usart_peek+0x14>)
 23fecb0:	6800      	ldr	r0, [r0, #0]
 23fecb2:	4b04      	ldr	r3, [pc, #16]	; (23fecc4 <hal_usart_peek+0x18>)
 23fecb4:	4403      	add	r3, r0
 23fecb6:	681b      	ldr	r3, [r3, #0]
 23fecb8:	699b      	ldr	r3, [r3, #24]
 23fecba:	9302      	str	r3, [sp, #8]
 23fecbc:	bd09      	pop	{r0, r3, pc}
 23fecbe:	0000      	.short	0x0000
 23fecc0:	1007ad94 	.word	0x1007ad94
 23fecc4:	00000024 	.word	0x00000024

023fecc8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fecc8:	b509      	push	{r0, r3, lr}
 23fecca:	4804      	ldr	r0, [pc, #16]	; (23fecdc <hal_usart_flush+0x14>)
 23feccc:	6800      	ldr	r0, [r0, #0]
 23fecce:	4b04      	ldr	r3, [pc, #16]	; (23fece0 <hal_usart_flush+0x18>)
 23fecd0:	4403      	add	r3, r0
 23fecd2:	681b      	ldr	r3, [r3, #0]
 23fecd4:	69db      	ldr	r3, [r3, #28]
 23fecd6:	9302      	str	r3, [sp, #8]
 23fecd8:	bd09      	pop	{r0, r3, pc}
 23fecda:	0000      	.short	0x0000
 23fecdc:	1007ad94 	.word	0x1007ad94
 23fece0:	00000024 	.word	0x00000024

023fece4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fece4:	b509      	push	{r0, r3, lr}
 23fece6:	4804      	ldr	r0, [pc, #16]	; (23fecf8 <hal_usart_is_enabled+0x14>)
 23fece8:	6800      	ldr	r0, [r0, #0]
 23fecea:	4b04      	ldr	r3, [pc, #16]	; (23fecfc <hal_usart_is_enabled+0x18>)
 23fecec:	4403      	add	r3, r0
 23fecee:	681b      	ldr	r3, [r3, #0]
 23fecf0:	6a1b      	ldr	r3, [r3, #32]
 23fecf2:	9302      	str	r3, [sp, #8]
 23fecf4:	bd09      	pop	{r0, r3, pc}
 23fecf6:	0000      	.short	0x0000
 23fecf8:	1007ad94 	.word	0x1007ad94
 23fecfc:	00000024 	.word	0x00000024

023fed00 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fed00:	b509      	push	{r0, r3, lr}
 23fed02:	4804      	ldr	r0, [pc, #16]	; (23fed14 <hal_usart_available_data_for_write+0x14>)
 23fed04:	6800      	ldr	r0, [r0, #0]
 23fed06:	4b04      	ldr	r3, [pc, #16]	; (23fed18 <hal_usart_available_data_for_write+0x18>)
 23fed08:	4403      	add	r3, r0
 23fed0a:	681b      	ldr	r3, [r3, #0]
 23fed0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fed0e:	9302      	str	r3, [sp, #8]
 23fed10:	bd09      	pop	{r0, r3, pc}
 23fed12:	0000      	.short	0x0000
 23fed14:	1007ad94 	.word	0x1007ad94
 23fed18:	00000024 	.word	0x00000024

023fed1c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fed1c:	b509      	push	{r0, r3, lr}
 23fed1e:	4804      	ldr	r0, [pc, #16]	; (23fed30 <hal_usart_init_ex+0x14>)
 23fed20:	6800      	ldr	r0, [r0, #0]
 23fed22:	4b04      	ldr	r3, [pc, #16]	; (23fed34 <hal_usart_init_ex+0x18>)
 23fed24:	4403      	add	r3, r0
 23fed26:	681b      	ldr	r3, [r3, #0]
 23fed28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fed2a:	9302      	str	r3, [sp, #8]
 23fed2c:	bd09      	pop	{r0, r3, pc}
 23fed2e:	0000      	.short	0x0000
 23fed30:	1007ad94 	.word	0x1007ad94
 23fed34:	00000024 	.word	0x00000024

023fed38 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fed38:	b509      	push	{r0, r3, lr}
 23fed3a:	4804      	ldr	r0, [pc, #16]	; (23fed4c <HAL_USB_USART_Init+0x14>)
 23fed3c:	6800      	ldr	r0, [r0, #0]
 23fed3e:	4b04      	ldr	r3, [pc, #16]	; (23fed50 <HAL_USB_USART_Init+0x18>)
 23fed40:	4403      	add	r3, r0
 23fed42:	681b      	ldr	r3, [r3, #0]
 23fed44:	681b      	ldr	r3, [r3, #0]
 23fed46:	9302      	str	r3, [sp, #8]
 23fed48:	bd09      	pop	{r0, r3, pc}
 23fed4a:	0000      	.short	0x0000
 23fed4c:	1007ad94 	.word	0x1007ad94
 23fed50:	00000034 	.word	0x00000034

023fed54 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fed54:	b509      	push	{r0, r3, lr}
 23fed56:	4804      	ldr	r0, [pc, #16]	; (23fed68 <HAL_USB_USART_Begin+0x14>)
 23fed58:	6800      	ldr	r0, [r0, #0]
 23fed5a:	4b04      	ldr	r3, [pc, #16]	; (23fed6c <HAL_USB_USART_Begin+0x18>)
 23fed5c:	4403      	add	r3, r0
 23fed5e:	681b      	ldr	r3, [r3, #0]
 23fed60:	685b      	ldr	r3, [r3, #4]
 23fed62:	9302      	str	r3, [sp, #8]
 23fed64:	bd09      	pop	{r0, r3, pc}
 23fed66:	0000      	.short	0x0000
 23fed68:	1007ad94 	.word	0x1007ad94
 23fed6c:	00000034 	.word	0x00000034

023fed70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fed70:	b509      	push	{r0, r3, lr}
 23fed72:	4804      	ldr	r0, [pc, #16]	; (23fed84 <HAL_USB_USART_Available_Data+0x14>)
 23fed74:	6800      	ldr	r0, [r0, #0]
 23fed76:	4b04      	ldr	r3, [pc, #16]	; (23fed88 <HAL_USB_USART_Available_Data+0x18>)
 23fed78:	4403      	add	r3, r0
 23fed7a:	681b      	ldr	r3, [r3, #0]
 23fed7c:	691b      	ldr	r3, [r3, #16]
 23fed7e:	9302      	str	r3, [sp, #8]
 23fed80:	bd09      	pop	{r0, r3, pc}
 23fed82:	0000      	.short	0x0000
 23fed84:	1007ad94 	.word	0x1007ad94
 23fed88:	00000034 	.word	0x00000034

023fed8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fed8c:	b509      	push	{r0, r3, lr}
 23fed8e:	4804      	ldr	r0, [pc, #16]	; (23feda0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fed90:	6800      	ldr	r0, [r0, #0]
 23fed92:	4b04      	ldr	r3, [pc, #16]	; (23feda4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fed94:	4403      	add	r3, r0
 23fed96:	681b      	ldr	r3, [r3, #0]
 23fed98:	695b      	ldr	r3, [r3, #20]
 23fed9a:	9302      	str	r3, [sp, #8]
 23fed9c:	bd09      	pop	{r0, r3, pc}
 23fed9e:	0000      	.short	0x0000
 23feda0:	1007ad94 	.word	0x1007ad94
 23feda4:	00000034 	.word	0x00000034

023feda8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feda8:	b509      	push	{r0, r3, lr}
 23fedaa:	4804      	ldr	r0, [pc, #16]	; (23fedbc <HAL_USB_USART_Receive_Data+0x14>)
 23fedac:	6800      	ldr	r0, [r0, #0]
 23fedae:	4b04      	ldr	r3, [pc, #16]	; (23fedc0 <HAL_USB_USART_Receive_Data+0x18>)
 23fedb0:	4403      	add	r3, r0
 23fedb2:	681b      	ldr	r3, [r3, #0]
 23fedb4:	699b      	ldr	r3, [r3, #24]
 23fedb6:	9302      	str	r3, [sp, #8]
 23fedb8:	bd09      	pop	{r0, r3, pc}
 23fedba:	0000      	.short	0x0000
 23fedbc:	1007ad94 	.word	0x1007ad94
 23fedc0:	00000034 	.word	0x00000034

023fedc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fedc4:	b509      	push	{r0, r3, lr}
 23fedc6:	4804      	ldr	r0, [pc, #16]	; (23fedd8 <HAL_USB_USART_Send_Data+0x14>)
 23fedc8:	6800      	ldr	r0, [r0, #0]
 23fedca:	4b04      	ldr	r3, [pc, #16]	; (23feddc <HAL_USB_USART_Send_Data+0x18>)
 23fedcc:	4403      	add	r3, r0
 23fedce:	681b      	ldr	r3, [r3, #0]
 23fedd0:	69db      	ldr	r3, [r3, #28]
 23fedd2:	9302      	str	r3, [sp, #8]
 23fedd4:	bd09      	pop	{r0, r3, pc}
 23fedd6:	0000      	.short	0x0000
 23fedd8:	1007ad94 	.word	0x1007ad94
 23feddc:	00000034 	.word	0x00000034

023fede0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fede0:	b509      	push	{r0, r3, lr}
 23fede2:	4804      	ldr	r0, [pc, #16]	; (23fedf4 <HAL_USB_USART_Flush_Data+0x14>)
 23fede4:	6800      	ldr	r0, [r0, #0]
 23fede6:	4b04      	ldr	r3, [pc, #16]	; (23fedf8 <HAL_USB_USART_Flush_Data+0x18>)
 23fede8:	4403      	add	r3, r0
 23fedea:	681b      	ldr	r3, [r3, #0]
 23fedec:	6a1b      	ldr	r3, [r3, #32]
 23fedee:	9302      	str	r3, [sp, #8]
 23fedf0:	bd09      	pop	{r0, r3, pc}
 23fedf2:	0000      	.short	0x0000
 23fedf4:	1007ad94 	.word	0x1007ad94
 23fedf8:	00000034 	.word	0x00000034

023fedfc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fedfc:	b509      	push	{r0, r3, lr}
 23fedfe:	4804      	ldr	r0, [pc, #16]	; (23fee10 <set_system_mode+0x14>)
 23fee00:	6800      	ldr	r0, [r0, #0]
 23fee02:	4b04      	ldr	r3, [pc, #16]	; (23fee14 <set_system_mode+0x18>)
 23fee04:	4403      	add	r3, r0
 23fee06:	681b      	ldr	r3, [r3, #0]
 23fee08:	685b      	ldr	r3, [r3, #4]
 23fee0a:	9302      	str	r3, [sp, #8]
 23fee0c:	bd09      	pop	{r0, r3, pc}
 23fee0e:	0000      	.short	0x0000
 23fee10:	1007ad94 	.word	0x1007ad94
 23fee14:	00000008 	.word	0x00000008

023fee18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fee18:	b509      	push	{r0, r3, lr}
 23fee1a:	4804      	ldr	r0, [pc, #16]	; (23fee2c <system_delay_ms+0x14>)
 23fee1c:	6800      	ldr	r0, [r0, #0]
 23fee1e:	4b04      	ldr	r3, [pc, #16]	; (23fee30 <system_delay_ms+0x18>)
 23fee20:	4403      	add	r3, r0
 23fee22:	681b      	ldr	r3, [r3, #0]
 23fee24:	695b      	ldr	r3, [r3, #20]
 23fee26:	9302      	str	r3, [sp, #8]
 23fee28:	bd09      	pop	{r0, r3, pc}
 23fee2a:	0000      	.short	0x0000
 23fee2c:	1007ad94 	.word	0x1007ad94
 23fee30:	00000008 	.word	0x00000008

023fee34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fee34:	b509      	push	{r0, r3, lr}
 23fee36:	4804      	ldr	r0, [pc, #16]	; (23fee48 <system_ctrl_set_app_request_handler+0x14>)
 23fee38:	6800      	ldr	r0, [r0, #0]
 23fee3a:	4b04      	ldr	r3, [pc, #16]	; (23fee4c <system_ctrl_set_app_request_handler+0x18>)
 23fee3c:	4403      	add	r3, r0
 23fee3e:	681b      	ldr	r3, [r3, #0]
 23fee40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fee44:	9302      	str	r3, [sp, #8]
 23fee46:	bd09      	pop	{r0, r3, pc}
 23fee48:	1007ad94 	.word	0x1007ad94
 23fee4c:	00000008 	.word	0x00000008

023fee50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fee50:	b509      	push	{r0, r3, lr}
 23fee52:	4804      	ldr	r0, [pc, #16]	; (23fee64 <system_ctrl_set_result+0x14>)
 23fee54:	6800      	ldr	r0, [r0, #0]
 23fee56:	4b04      	ldr	r3, [pc, #16]	; (23fee68 <system_ctrl_set_result+0x18>)
 23fee58:	4403      	add	r3, r0
 23fee5a:	681b      	ldr	r3, [r3, #0]
 23fee5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fee60:	9302      	str	r3, [sp, #8]
 23fee62:	bd09      	pop	{r0, r3, pc}
 23fee64:	1007ad94 	.word	0x1007ad94
 23fee68:	00000008 	.word	0x00000008

023fee6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fee6c:	b509      	push	{r0, r3, lr}
 23fee6e:	4804      	ldr	r0, [pc, #16]	; (23fee80 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fee70:	6800      	ldr	r0, [r0, #0]
 23fee72:	4b04      	ldr	r3, [pc, #16]	; (23fee84 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fee74:	4403      	add	r3, r0
 23fee76:	681b      	ldr	r3, [r3, #0]
 23fee78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fee7a:	9302      	str	r3, [sp, #8]
 23fee7c:	bd09      	pop	{r0, r3, pc}
 23fee7e:	0000      	.short	0x0000
 23fee80:	1007ad94 	.word	0x1007ad94
 23fee84:	0000002c 	.word	0x0000002c

023fee88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fee88:	b509      	push	{r0, r3, lr}
 23fee8a:	4804      	ldr	r0, [pc, #16]	; (23fee9c <network_connect+0x14>)
 23fee8c:	6800      	ldr	r0, [r0, #0]
 23fee8e:	4b04      	ldr	r3, [pc, #16]	; (23feea0 <network_connect+0x18>)
 23fee90:	4403      	add	r3, r0
 23fee92:	681b      	ldr	r3, [r3, #0]
 23fee94:	685b      	ldr	r3, [r3, #4]
 23fee96:	9302      	str	r3, [sp, #8]
 23fee98:	bd09      	pop	{r0, r3, pc}
 23fee9a:	0000      	.short	0x0000
 23fee9c:	1007ad94 	.word	0x1007ad94
 23feea0:	00000028 	.word	0x00000028

023feea4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23feea4:	b509      	push	{r0, r3, lr}
 23feea6:	4804      	ldr	r0, [pc, #16]	; (23feeb8 <network_connecting+0x14>)
 23feea8:	6800      	ldr	r0, [r0, #0]
 23feeaa:	4b04      	ldr	r3, [pc, #16]	; (23feebc <network_connecting+0x18>)
 23feeac:	4403      	add	r3, r0
 23feeae:	681b      	ldr	r3, [r3, #0]
 23feeb0:	689b      	ldr	r3, [r3, #8]
 23feeb2:	9302      	str	r3, [sp, #8]
 23feeb4:	bd09      	pop	{r0, r3, pc}
 23feeb6:	0000      	.short	0x0000
 23feeb8:	1007ad94 	.word	0x1007ad94
 23feebc:	00000028 	.word	0x00000028

023feec0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23feec0:	b509      	push	{r0, r3, lr}
 23feec2:	4804      	ldr	r0, [pc, #16]	; (23feed4 <network_disconnect+0x14>)
 23feec4:	6800      	ldr	r0, [r0, #0]
 23feec6:	4b04      	ldr	r3, [pc, #16]	; (23feed8 <network_disconnect+0x18>)
 23feec8:	4403      	add	r3, r0
 23feeca:	681b      	ldr	r3, [r3, #0]
 23feecc:	68db      	ldr	r3, [r3, #12]
 23feece:	9302      	str	r3, [sp, #8]
 23feed0:	bd09      	pop	{r0, r3, pc}
 23feed2:	0000      	.short	0x0000
 23feed4:	1007ad94 	.word	0x1007ad94
 23feed8:	00000028 	.word	0x00000028

023feedc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23feedc:	b509      	push	{r0, r3, lr}
 23feede:	4804      	ldr	r0, [pc, #16]	; (23feef0 <network_ready+0x14>)
 23feee0:	6800      	ldr	r0, [r0, #0]
 23feee2:	4b04      	ldr	r3, [pc, #16]	; (23feef4 <network_ready+0x18>)
 23feee4:	4403      	add	r3, r0
 23feee6:	681b      	ldr	r3, [r3, #0]
 23feee8:	691b      	ldr	r3, [r3, #16]
 23feeea:	9302      	str	r3, [sp, #8]
 23feeec:	bd09      	pop	{r0, r3, pc}
 23feeee:	0000      	.short	0x0000
 23feef0:	1007ad94 	.word	0x1007ad94
 23feef4:	00000028 	.word	0x00000028

023feef8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23feef8:	b509      	push	{r0, r3, lr}
 23feefa:	4804      	ldr	r0, [pc, #16]	; (23fef0c <network_on+0x14>)
 23feefc:	6800      	ldr	r0, [r0, #0]
 23feefe:	4b04      	ldr	r3, [pc, #16]	; (23fef10 <network_on+0x18>)
 23fef00:	4403      	add	r3, r0
 23fef02:	681b      	ldr	r3, [r3, #0]
 23fef04:	695b      	ldr	r3, [r3, #20]
 23fef06:	9302      	str	r3, [sp, #8]
 23fef08:	bd09      	pop	{r0, r3, pc}
 23fef0a:	0000      	.short	0x0000
 23fef0c:	1007ad94 	.word	0x1007ad94
 23fef10:	00000028 	.word	0x00000028

023fef14 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fef14:	b509      	push	{r0, r3, lr}
 23fef16:	4804      	ldr	r0, [pc, #16]	; (23fef28 <network_off+0x14>)
 23fef18:	6800      	ldr	r0, [r0, #0]
 23fef1a:	4b04      	ldr	r3, [pc, #16]	; (23fef2c <network_off+0x18>)
 23fef1c:	4403      	add	r3, r0
 23fef1e:	681b      	ldr	r3, [r3, #0]
 23fef20:	699b      	ldr	r3, [r3, #24]
 23fef22:	9302      	str	r3, [sp, #8]
 23fef24:	bd09      	pop	{r0, r3, pc}
 23fef26:	0000      	.short	0x0000
 23fef28:	1007ad94 	.word	0x1007ad94
 23fef2c:	00000028 	.word	0x00000028

023fef30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fef30:	b509      	push	{r0, r3, lr}
 23fef32:	4804      	ldr	r0, [pc, #16]	; (23fef44 <network_listen+0x14>)
 23fef34:	6800      	ldr	r0, [r0, #0]
 23fef36:	4b04      	ldr	r3, [pc, #16]	; (23fef48 <network_listen+0x18>)
 23fef38:	4403      	add	r3, r0
 23fef3a:	681b      	ldr	r3, [r3, #0]
 23fef3c:	69db      	ldr	r3, [r3, #28]
 23fef3e:	9302      	str	r3, [sp, #8]
 23fef40:	bd09      	pop	{r0, r3, pc}
 23fef42:	0000      	.short	0x0000
 23fef44:	1007ad94 	.word	0x1007ad94
 23fef48:	00000028 	.word	0x00000028

023fef4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fef4c:	b509      	push	{r0, r3, lr}
 23fef4e:	4804      	ldr	r0, [pc, #16]	; (23fef60 <network_listening+0x14>)
 23fef50:	6800      	ldr	r0, [r0, #0]
 23fef52:	4b04      	ldr	r3, [pc, #16]	; (23fef64 <network_listening+0x18>)
 23fef54:	4403      	add	r3, r0
 23fef56:	681b      	ldr	r3, [r3, #0]
 23fef58:	6a1b      	ldr	r3, [r3, #32]
 23fef5a:	9302      	str	r3, [sp, #8]
 23fef5c:	bd09      	pop	{r0, r3, pc}
 23fef5e:	0000      	.short	0x0000
 23fef60:	1007ad94 	.word	0x1007ad94
 23fef64:	00000028 	.word	0x00000028

023fef68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fef68:	b509      	push	{r0, r3, lr}
 23fef6a:	4804      	ldr	r0, [pc, #16]	; (23fef7c <network_set_listen_timeout+0x14>)
 23fef6c:	6800      	ldr	r0, [r0, #0]
 23fef6e:	4b04      	ldr	r3, [pc, #16]	; (23fef80 <network_set_listen_timeout+0x18>)
 23fef70:	4403      	add	r3, r0
 23fef72:	681b      	ldr	r3, [r3, #0]
 23fef74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fef76:	9302      	str	r3, [sp, #8]
 23fef78:	bd09      	pop	{r0, r3, pc}
 23fef7a:	0000      	.short	0x0000
 23fef7c:	1007ad94 	.word	0x1007ad94
 23fef80:	00000028 	.word	0x00000028

023fef84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fef84:	b509      	push	{r0, r3, lr}
 23fef86:	4804      	ldr	r0, [pc, #16]	; (23fef98 <network_get_listen_timeout+0x14>)
 23fef88:	6800      	ldr	r0, [r0, #0]
 23fef8a:	4b04      	ldr	r3, [pc, #16]	; (23fef9c <network_get_listen_timeout+0x18>)
 23fef8c:	4403      	add	r3, r0
 23fef8e:	681b      	ldr	r3, [r3, #0]
 23fef90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fef92:	9302      	str	r3, [sp, #8]
 23fef94:	bd09      	pop	{r0, r3, pc}
 23fef96:	0000      	.short	0x0000
 23fef98:	1007ad94 	.word	0x1007ad94
 23fef9c:	00000028 	.word	0x00000028

023fefa0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fefa0:	b509      	push	{r0, r3, lr}
 23fefa2:	4804      	ldr	r0, [pc, #16]	; (23fefb4 <network_is_on+0x14>)
 23fefa4:	6800      	ldr	r0, [r0, #0]
 23fefa6:	4b04      	ldr	r3, [pc, #16]	; (23fefb8 <network_is_on+0x18>)
 23fefa8:	4403      	add	r3, r0
 23fefaa:	681b      	ldr	r3, [r3, #0]
 23fefac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fefae:	9302      	str	r3, [sp, #8]
 23fefb0:	bd09      	pop	{r0, r3, pc}
 23fefb2:	0000      	.short	0x0000
 23fefb4:	1007ad94 	.word	0x1007ad94
 23fefb8:	00000028 	.word	0x00000028

023fefbc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fefbc:	b509      	push	{r0, r3, lr}
 23fefbe:	4804      	ldr	r0, [pc, #16]	; (23fefd0 <network_is_off+0x14>)
 23fefc0:	6800      	ldr	r0, [r0, #0]
 23fefc2:	4b04      	ldr	r3, [pc, #16]	; (23fefd4 <network_is_off+0x18>)
 23fefc4:	4403      	add	r3, r0
 23fefc6:	681b      	ldr	r3, [r3, #0]
 23fefc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fefca:	9302      	str	r3, [sp, #8]
 23fefcc:	bd09      	pop	{r0, r3, pc}
 23fefce:	0000      	.short	0x0000
 23fefd0:	1007ad94 	.word	0x1007ad94
 23fefd4:	00000028 	.word	0x00000028

023fefd8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fefd8:	b509      	push	{r0, r3, lr}
 23fefda:	4804      	ldr	r0, [pc, #16]	; (23fefec <malloc+0x14>)
 23fefdc:	6800      	ldr	r0, [r0, #0]
 23fefde:	4b04      	ldr	r3, [pc, #16]	; (23feff0 <malloc+0x18>)
 23fefe0:	4403      	add	r3, r0
 23fefe2:	681b      	ldr	r3, [r3, #0]
 23fefe4:	681b      	ldr	r3, [r3, #0]
 23fefe6:	9302      	str	r3, [sp, #8]
 23fefe8:	bd09      	pop	{r0, r3, pc}
 23fefea:	0000      	.short	0x0000
 23fefec:	1007ad94 	.word	0x1007ad94
 23feff0:	00000004 	.word	0x00000004

023feff4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23feff4:	b509      	push	{r0, r3, lr}
 23feff6:	4804      	ldr	r0, [pc, #16]	; (23ff008 <free+0x14>)
 23feff8:	6800      	ldr	r0, [r0, #0]
 23feffa:	4b04      	ldr	r3, [pc, #16]	; (23ff00c <free+0x18>)
 23feffc:	4403      	add	r3, r0
 23feffe:	681b      	ldr	r3, [r3, #0]
 23ff000:	685b      	ldr	r3, [r3, #4]
 23ff002:	9302      	str	r3, [sp, #8]
 23ff004:	bd09      	pop	{r0, r3, pc}
 23ff006:	0000      	.short	0x0000
 23ff008:	1007ad94 	.word	0x1007ad94
 23ff00c:	00000004 	.word	0x00000004

023ff010 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23ff010:	b509      	push	{r0, r3, lr}
 23ff012:	4804      	ldr	r0, [pc, #16]	; (23ff024 <__assert_func+0x14>)
 23ff014:	6800      	ldr	r0, [r0, #0]
 23ff016:	4b04      	ldr	r3, [pc, #16]	; (23ff028 <__assert_func+0x18>)
 23ff018:	4403      	add	r3, r0
 23ff01a:	681b      	ldr	r3, [r3, #0]
 23ff01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23ff01e:	9302      	str	r3, [sp, #8]
 23ff020:	bd09      	pop	{r0, r3, pc}
 23ff022:	0000      	.short	0x0000
 23ff024:	1007ad94 	.word	0x1007ad94
 23ff028:	00000004 	.word	0x00000004

023ff02c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23ff02c:	b509      	push	{r0, r3, lr}
 23ff02e:	4804      	ldr	r0, [pc, #16]	; (23ff040 <newlib_impure_ptr_callback+0x14>)
 23ff030:	6800      	ldr	r0, [r0, #0]
 23ff032:	4b04      	ldr	r3, [pc, #16]	; (23ff044 <newlib_impure_ptr_callback+0x18>)
 23ff034:	4403      	add	r3, r0
 23ff036:	681b      	ldr	r3, [r3, #0]
 23ff038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23ff03a:	9302      	str	r3, [sp, #8]
 23ff03c:	bd09      	pop	{r0, r3, pc}
 23ff03e:	0000      	.short	0x0000
 23ff040:	1007ad94 	.word	0x1007ad94
 23ff044:	00000004 	.word	0x00000004

023ff048 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23ff048:	2100      	movs	r1, #0
 23ff04a:	f7ff bee5 	b.w	23fee18 <system_delay_ms>
	...

023ff050 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23ff050:	2300      	movs	r3, #0
 23ff052:	4802      	ldr	r0, [pc, #8]	; (23ff05c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23ff054:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23ff056:	f7ff bc93 	b.w	23fe980 <os_mutex_recursive_create>
 23ff05a:	bf00      	nop
 23ff05c:	1007ae80 	.word	0x1007ae80

023ff060 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff060:	2200      	movs	r2, #0
 23ff062:	6840      	ldr	r0, [r0, #4]
 23ff064:	4611      	mov	r1, r2
 23ff066:	f7ff bf71 	b.w	23fef4c <network_listening>

023ff06a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff06a:	2200      	movs	r2, #0
 23ff06c:	6840      	ldr	r0, [r0, #4]
 23ff06e:	4611      	mov	r1, r2
 23ff070:	f7ff bf88 	b.w	23fef84 <network_get_listen_timeout>

023ff074 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff074:	2200      	movs	r2, #0
 23ff076:	6840      	ldr	r0, [r0, #4]
 23ff078:	f7ff bf76 	b.w	23fef68 <network_set_listen_timeout>

023ff07c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff07c:	2200      	movs	r2, #0
 23ff07e:	6840      	ldr	r0, [r0, #4]
 23ff080:	f081 0101 	eor.w	r1, r1, #1
 23ff084:	f7ff bf54 	b.w	23fef30 <network_listen>

023ff088 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff088:	2300      	movs	r3, #0
 23ff08a:	6840      	ldr	r0, [r0, #4]
 23ff08c:	461a      	mov	r2, r3
 23ff08e:	4619      	mov	r1, r3
 23ff090:	f7ff bf40 	b.w	23fef14 <network_off>

023ff094 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff094:	2300      	movs	r3, #0
 23ff096:	6840      	ldr	r0, [r0, #4]
 23ff098:	461a      	mov	r2, r3
 23ff09a:	4619      	mov	r1, r3
 23ff09c:	f7ff bf2c 	b.w	23feef8 <network_on>

023ff0a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23ff0a0:	2200      	movs	r2, #0
 23ff0a2:	6840      	ldr	r0, [r0, #4]
 23ff0a4:	4611      	mov	r1, r2
 23ff0a6:	f7ff bf19 	b.w	23feedc <network_ready>

023ff0aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff0aa:	2200      	movs	r2, #0
 23ff0ac:	6840      	ldr	r0, [r0, #4]
 23ff0ae:	4611      	mov	r1, r2
 23ff0b0:	f7ff bef8 	b.w	23feea4 <network_connecting>

023ff0b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff0b4:	2200      	movs	r2, #0
 23ff0b6:	2102      	movs	r1, #2
 23ff0b8:	6840      	ldr	r0, [r0, #4]
 23ff0ba:	f7ff bf01 	b.w	23feec0 <network_disconnect>

023ff0be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff0be:	2300      	movs	r3, #0
 23ff0c0:	6840      	ldr	r0, [r0, #4]
 23ff0c2:	461a      	mov	r2, r3
 23ff0c4:	f7ff bee0 	b.w	23fee88 <network_connect>

023ff0c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23ff0c8:	2203      	movs	r2, #3
 23ff0ca:	4b02      	ldr	r3, [pc, #8]	; (23ff0d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff0cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff0ce:	4a02      	ldr	r2, [pc, #8]	; (23ff0d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff0d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff0d2:	4770      	bx	lr
 23ff0d4:	1007ae84 	.word	0x1007ae84
 23ff0d8:	023ffdf0 	.word	0x023ffdf0

023ff0dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23ff0dc:	4770      	bx	lr

023ff0de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23ff0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff0e0:	4606      	mov	r6, r0
 23ff0e2:	4615      	mov	r5, r2
 23ff0e4:	460c      	mov	r4, r1
 23ff0e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23ff0e8:	42bc      	cmp	r4, r7
 23ff0ea:	d006      	beq.n	23ff0fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23ff0ec:	6833      	ldr	r3, [r6, #0]
 23ff0ee:	4630      	mov	r0, r6
 23ff0f0:	689b      	ldr	r3, [r3, #8]
 23ff0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 23ff0f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23ff0f8:	e7f6      	b.n	23ff0e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23ff0fa:	4628      	mov	r0, r5
 23ff0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff0fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23ff0fe:	2200      	movs	r2, #0
 23ff100:	7c00      	ldrb	r0, [r0, #16]
 23ff102:	f7ff bce5 	b.w	23fead0 <hal_i2c_write>

023ff106 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23ff106:	2100      	movs	r1, #0
 23ff108:	7c00      	ldrb	r0, [r0, #16]
 23ff10a:	f7ff bcef 	b.w	23feaec <hal_i2c_available>

023ff10e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23ff10e:	2100      	movs	r1, #0
 23ff110:	7c00      	ldrb	r0, [r0, #16]
 23ff112:	f7ff bcf9 	b.w	23feb08 <hal_i2c_read>

023ff116 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23ff116:	2100      	movs	r1, #0
 23ff118:	7c00      	ldrb	r0, [r0, #16]
 23ff11a:	f7ff bd03 	b.w	23feb24 <hal_i2c_peek>

023ff11e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23ff11e:	2100      	movs	r1, #0
 23ff120:	7c00      	ldrb	r0, [r0, #16]
 23ff122:	f7ff bd0d 	b.w	23feb40 <hal_i2c_flush>

023ff126 <_ZN7TwoWireD0Ev>:
 23ff126:	b510      	push	{r4, lr}
 23ff128:	4604      	mov	r4, r0
 23ff12a:	2114      	movs	r1, #20
 23ff12c:	f7ff fa23 	bl	23fe576 <_ZdlPvj>
 23ff130:	4620      	mov	r0, r4
 23ff132:	bd10      	pop	{r4, pc}

023ff134 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff134:	b538      	push	{r3, r4, r5, lr}
 23ff136:	4604      	mov	r4, r0
 23ff138:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23ff13a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff13e:	2200      	movs	r2, #0
 23ff140:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff144:	4b09      	ldr	r3, [pc, #36]	; (23ff16c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23ff146:	4608      	mov	r0, r1
  _i2c = i2c;
 23ff148:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff14a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23ff14c:	4629      	mov	r1, r5
 23ff14e:	f7ff fd13 	bl	23feb78 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff152:	30bf      	adds	r0, #191	; 0xbf
 23ff154:	d108      	bne.n	23ff168 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23ff156:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff158:	07db      	lsls	r3, r3, #31
 23ff15a:	d505      	bpl.n	23ff168 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23ff15c:	6868      	ldr	r0, [r5, #4]
 23ff15e:	f7ff ff49 	bl	23feff4 <free>
    free(conf.tx_buffer);
 23ff162:	68e8      	ldr	r0, [r5, #12]
 23ff164:	f7ff ff46 	bl	23feff4 <free>
}
 23ff168:	4620      	mov	r0, r4
 23ff16a:	bd38      	pop	{r3, r4, r5, pc}
 23ff16c:	023ffe2c 	.word	0x023ffe2c

023ff170 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff170:	4770      	bx	lr

023ff172 <_ZN9IPAddressD0Ev>:
 23ff172:	b510      	push	{r4, lr}
 23ff174:	4604      	mov	r4, r0
 23ff176:	2118      	movs	r1, #24
 23ff178:	f7ff f9fd 	bl	23fe576 <_ZdlPvj>
 23ff17c:	4620      	mov	r0, r4
 23ff17e:	bd10      	pop	{r4, pc}

023ff180 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff180:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff182:	7d03      	ldrb	r3, [r0, #20]
{
 23ff184:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff186:	2b06      	cmp	r3, #6
 23ff188:	f04f 0400 	mov.w	r4, #0
{
 23ff18c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff18e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff192:	d012      	beq.n	23ff1ba <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff194:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff198:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff19c:	220a      	movs	r2, #10
 23ff19e:	4630      	mov	r0, r6
 23ff1a0:	f000 f959 	bl	23ff456 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff1a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff1a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff1a8:	d019      	beq.n	23ff1de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff1aa:	2c00      	cmp	r4, #0
 23ff1ac:	d0f4      	beq.n	23ff198 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff1ae:	212e      	movs	r1, #46	; 0x2e
 23ff1b0:	4630      	mov	r0, r6
 23ff1b2:	f000 f937 	bl	23ff424 <_ZN5Print5printEc>
 23ff1b6:	4404      	add	r4, r0
 23ff1b8:	e7ee      	b.n	23ff198 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff1ba:	232f      	movs	r3, #47	; 0x2f
 23ff1bc:	466a      	mov	r2, sp
 23ff1be:	4639      	mov	r1, r7
 23ff1c0:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff1c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff1c6:	f7ff fce5 	bl	23feb94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff1ca:	4668      	mov	r0, sp
 23ff1cc:	f7ff f9ac 	bl	23fe528 <strlen>
 23ff1d0:	6833      	ldr	r3, [r6, #0]
 23ff1d2:	4602      	mov	r2, r0
 23ff1d4:	4669      	mov	r1, sp
 23ff1d6:	4630      	mov	r0, r6
 23ff1d8:	68db      	ldr	r3, [r3, #12]
 23ff1da:	4798      	blx	r3
 23ff1dc:	4604      	mov	r4, r0
    }
    return n;
}
 23ff1de:	4620      	mov	r0, r4
 23ff1e0:	b00d      	add	sp, #52	; 0x34
 23ff1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff1e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff1e4:	b510      	push	{r4, lr}
 23ff1e6:	4604      	mov	r4, r0
 23ff1e8:	4b04      	ldr	r3, [pc, #16]	; (23ff1fc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff1ea:	2211      	movs	r2, #17
 23ff1ec:	2100      	movs	r1, #0
 23ff1ee:	f840 3b04 	str.w	r3, [r0], #4
 23ff1f2:	f000 fd28 	bl	23ffc46 <memset>
}
 23ff1f6:	4620      	mov	r0, r4
 23ff1f8:	bd10      	pop	{r4, pc}
 23ff1fa:	bf00      	nop
 23ff1fc:	023ffe54 	.word	0x023ffe54

023ff200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff200:	4603      	mov	r3, r0
 23ff202:	4a07      	ldr	r2, [pc, #28]	; (23ff220 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff204:	b510      	push	{r4, lr}
 23ff206:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff20a:	f101 0210 	add.w	r2, r1, #16
 23ff20e:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff212:	4291      	cmp	r1, r2
 23ff214:	f843 4b04 	str.w	r4, [r3], #4
 23ff218:	d1f9      	bne.n	23ff20e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff21a:	780a      	ldrb	r2, [r1, #0]
 23ff21c:	701a      	strb	r2, [r3, #0]
}
 23ff21e:	bd10      	pop	{r4, pc}
 23ff220:	023ffe54 	.word	0x023ffe54

023ff224 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff224:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff226:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff22a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff22e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff232:	2304      	movs	r3, #4
 23ff234:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff238:	6041      	str	r1, [r0, #4]
 23ff23a:	7503      	strb	r3, [r0, #20]
}
 23ff23c:	bd10      	pop	{r4, pc}
	...

023ff240 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff240:	b507      	push	{r0, r1, r2, lr}
 23ff242:	4b06      	ldr	r3, [pc, #24]	; (23ff25c <_ZN9IPAddressC1EPKh+0x1c>)
 23ff244:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff246:	78cb      	ldrb	r3, [r1, #3]
 23ff248:	9300      	str	r3, [sp, #0]
 23ff24a:	788b      	ldrb	r3, [r1, #2]
 23ff24c:	784a      	ldrb	r2, [r1, #1]
 23ff24e:	7809      	ldrb	r1, [r1, #0]
 23ff250:	f7ff ffe8 	bl	23ff224 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff254:	b003      	add	sp, #12
 23ff256:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff25a:	bf00      	nop
 23ff25c:	023ffe54 	.word	0x023ffe54

023ff260 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff260:	4b01      	ldr	r3, [pc, #4]	; (23ff268 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff262:	4a02      	ldr	r2, [pc, #8]	; (23ff26c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff264:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff266:	4770      	bx	lr
 23ff268:	1007ae8c 	.word	0x1007ae8c
 23ff26c:	023ffe60 	.word	0x023ffe60

023ff270 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff270:	2300      	movs	r3, #0
 23ff272:	6840      	ldr	r0, [r0, #4]
 23ff274:	461a      	mov	r2, r3
 23ff276:	f7ff be07 	b.w	23fee88 <network_connect>

023ff27a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff27a:	2200      	movs	r2, #0
 23ff27c:	2102      	movs	r1, #2
 23ff27e:	6840      	ldr	r0, [r0, #4]
 23ff280:	f7ff be1e 	b.w	23feec0 <network_disconnect>

023ff284 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff284:	2200      	movs	r2, #0
 23ff286:	6840      	ldr	r0, [r0, #4]
 23ff288:	4611      	mov	r1, r2
 23ff28a:	f7ff be0b 	b.w	23feea4 <network_connecting>

023ff28e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff28e:	2200      	movs	r2, #0
 23ff290:	6840      	ldr	r0, [r0, #4]
 23ff292:	4611      	mov	r1, r2
 23ff294:	f7ff be22 	b.w	23feedc <network_ready>

023ff298 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff298:	2300      	movs	r3, #0
 23ff29a:	6840      	ldr	r0, [r0, #4]
 23ff29c:	461a      	mov	r2, r3
 23ff29e:	4619      	mov	r1, r3
 23ff2a0:	f7ff be2a 	b.w	23feef8 <network_on>

023ff2a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff2a4:	2300      	movs	r3, #0
 23ff2a6:	6840      	ldr	r0, [r0, #4]
 23ff2a8:	461a      	mov	r2, r3
 23ff2aa:	4619      	mov	r1, r3
 23ff2ac:	f7ff be32 	b.w	23fef14 <network_off>

023ff2b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff2b0:	2100      	movs	r1, #0
 23ff2b2:	6840      	ldr	r0, [r0, #4]
 23ff2b4:	f7ff be74 	b.w	23fefa0 <network_is_on>

023ff2b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff2b8:	2100      	movs	r1, #0
 23ff2ba:	6840      	ldr	r0, [r0, #4]
 23ff2bc:	f7ff be7e 	b.w	23fefbc <network_is_off>

023ff2c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff2c0:	2200      	movs	r2, #0
 23ff2c2:	6840      	ldr	r0, [r0, #4]
 23ff2c4:	f081 0101 	eor.w	r1, r1, #1
 23ff2c8:	f7ff be32 	b.w	23fef30 <network_listen>

023ff2cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff2cc:	2200      	movs	r2, #0
 23ff2ce:	6840      	ldr	r0, [r0, #4]
 23ff2d0:	f7ff be4a 	b.w	23fef68 <network_set_listen_timeout>

023ff2d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff2d4:	2200      	movs	r2, #0
 23ff2d6:	6840      	ldr	r0, [r0, #4]
 23ff2d8:	4611      	mov	r1, r2
 23ff2da:	f7ff be53 	b.w	23fef84 <network_get_listen_timeout>

023ff2de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff2de:	2200      	movs	r2, #0
 23ff2e0:	6840      	ldr	r0, [r0, #4]
 23ff2e2:	4611      	mov	r1, r2
 23ff2e4:	f7ff be32 	b.w	23fef4c <network_listening>

023ff2e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff2ec:	b095      	sub	sp, #84	; 0x54
 23ff2ee:	4614      	mov	r4, r2
 23ff2f0:	460d      	mov	r5, r1
 23ff2f2:	4607      	mov	r7, r0
    IPAddress addr;
 23ff2f4:	f7ff ff76 	bl	23ff1e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff2f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff2fa:	221c      	movs	r2, #28
 23ff2fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff2fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff300:	f000 fca1 	bl	23ffc46 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff304:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff306:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff308:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff30a:	2100      	movs	r1, #0
 23ff30c:	466b      	mov	r3, sp
 23ff30e:	aa0c      	add	r2, sp, #48	; 0x30
 23ff310:	f7ff fc5c 	bl	23febcc <netdb_getaddrinfo>
    if (!r) {
 23ff314:	4604      	mov	r4, r0
 23ff316:	2800      	cmp	r0, #0
 23ff318:	d14b      	bne.n	23ff3b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff31a:	4602      	mov	r2, r0
 23ff31c:	2101      	movs	r1, #1
 23ff31e:	6868      	ldr	r0, [r5, #4]
 23ff320:	f7ff fddc 	bl	23feedc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff324:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff326:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff328:	4622      	mov	r2, r4
 23ff32a:	6868      	ldr	r0, [r5, #4]
 23ff32c:	f7ff fdd6 	bl	23feedc <network_ready>
        bool ok = false;
 23ff330:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff332:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff334:	9e00      	ldr	r6, [sp, #0]
 23ff336:	2e00      	cmp	r6, #0
 23ff338:	d03b      	beq.n	23ff3b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff33a:	2900      	cmp	r1, #0
 23ff33c:	d139      	bne.n	23ff3b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff33e:	6873      	ldr	r3, [r6, #4]
 23ff340:	2b02      	cmp	r3, #2
 23ff342:	d003      	beq.n	23ff34c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff344:	2b0a      	cmp	r3, #10
 23ff346:	d011      	beq.n	23ff36c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff348:	69f6      	ldr	r6, [r6, #28]
 23ff34a:	e7f4      	b.n	23ff336 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff34c:	f1b8 0f00 	cmp.w	r8, #0
 23ff350:	d0fa      	beq.n	23ff348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff352:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff354:	a806      	add	r0, sp, #24
 23ff356:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff358:	1d3c      	adds	r4, r7, #4
 23ff35a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff35c:	f7ff ff70 	bl	23ff240 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff364:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff366:	4641      	mov	r1, r8
 23ff368:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff36a:	e7ed      	b.n	23ff348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff36c:	f1b9 0f00 	cmp.w	r9, #0
 23ff370:	d0ea      	beq.n	23ff348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff372:	2210      	movs	r2, #16
 23ff374:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff376:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff378:	f000 fc65 	bl	23ffc46 <memset>
                    a.v = 6;
 23ff37c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff37e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff380:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff384:	f104 0308 	add.w	r3, r4, #8
 23ff388:	3418      	adds	r4, #24
 23ff38a:	462a      	mov	r2, r5
 23ff38c:	6818      	ldr	r0, [r3, #0]
 23ff38e:	6859      	ldr	r1, [r3, #4]
 23ff390:	3308      	adds	r3, #8
 23ff392:	c203      	stmia	r2!, {r0, r1}
 23ff394:	42a3      	cmp	r3, r4
 23ff396:	4615      	mov	r5, r2
 23ff398:	d1f7      	bne.n	23ff38a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff39a:	a901      	add	r1, sp, #4
 23ff39c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff39e:	1d3c      	adds	r4, r7, #4
 23ff3a0:	ad07      	add	r5, sp, #28
 23ff3a2:	f7ff ff2d 	bl	23ff200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff3a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff3a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff3aa:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff3ac:	4649      	mov	r1, r9
 23ff3ae:	7023      	strb	r3, [r4, #0]
                    break;
 23ff3b0:	e7ca      	b.n	23ff348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff3b2:	9800      	ldr	r0, [sp, #0]
 23ff3b4:	f7ff fbfc 	bl	23febb0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff3b8:	4638      	mov	r0, r7
 23ff3ba:	b015      	add	sp, #84	; 0x54
 23ff3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff3c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff3c0:	4b02      	ldr	r3, [pc, #8]	; (23ff3cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff3c2:	4a03      	ldr	r2, [pc, #12]	; (23ff3d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff3c4:	601a      	str	r2, [r3, #0]
 23ff3c6:	2200      	movs	r2, #0
 23ff3c8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff3ca:	4770      	bx	lr
 23ff3cc:	1007ae90 	.word	0x1007ae90
 23ff3d0:	023ffe6c 	.word	0x023ffe6c

023ff3d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff3d6:	4606      	mov	r6, r0
 23ff3d8:	460d      	mov	r5, r1
  size_t n = 0;
 23ff3da:	2400      	movs	r4, #0
 23ff3dc:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff3de:	42bd      	cmp	r5, r7
 23ff3e0:	d00c      	beq.n	23ff3fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff3e2:	6833      	ldr	r3, [r6, #0]
 23ff3e4:	4630      	mov	r0, r6
 23ff3e6:	689b      	ldr	r3, [r3, #8]
 23ff3e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff3ec:	4798      	blx	r3
     if (chunk>=0)
 23ff3ee:	1e03      	subs	r3, r0, #0
 23ff3f0:	db01      	blt.n	23ff3f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff3f2:	441c      	add	r4, r3
  while (size--) {
 23ff3f4:	e7f3      	b.n	23ff3de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff3f6:	2c00      	cmp	r4, #0
 23ff3f8:	bf08      	it	eq
 23ff3fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff3fc:	4620      	mov	r0, r4
 23ff3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff400 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff400:	b513      	push	{r0, r1, r4, lr}
 23ff402:	4604      	mov	r4, r0
    }
 23ff404:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff406:	b159      	cbz	r1, 23ff420 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff408:	9101      	str	r1, [sp, #4]
 23ff40a:	f7ff f88d 	bl	23fe528 <strlen>
 23ff40e:	4602      	mov	r2, r0
 23ff410:	4620      	mov	r0, r4
 23ff412:	6823      	ldr	r3, [r4, #0]
 23ff414:	9901      	ldr	r1, [sp, #4]
 23ff416:	68db      	ldr	r3, [r3, #12]
    }
 23ff418:	b002      	add	sp, #8
 23ff41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff41e:	4718      	bx	r3
    }
 23ff420:	b002      	add	sp, #8
 23ff422:	bd10      	pop	{r4, pc}

023ff424 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23ff424:	6803      	ldr	r3, [r0, #0]
 23ff426:	689b      	ldr	r3, [r3, #8]
 23ff428:	4718      	bx	r3

023ff42a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff42a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff42c:	210d      	movs	r1, #13
{
 23ff42e:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff430:	f7ff fff8 	bl	23ff424 <_ZN5Print5printEc>
  n += print('\n');
 23ff434:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff436:	4604      	mov	r4, r0
  n += print('\n');
 23ff438:	4628      	mov	r0, r5
 23ff43a:	f7ff fff3 	bl	23ff424 <_ZN5Print5printEc>
  return n;
}
 23ff43e:	4420      	add	r0, r4
 23ff440:	bd38      	pop	{r3, r4, r5, pc}

023ff442 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff442:	b538      	push	{r3, r4, r5, lr}
 23ff444:	4605      	mov	r5, r0
  return write(str);
 23ff446:	f7ff ffdb 	bl	23ff400 <_ZN5Print5writeEPKc>
 23ff44a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff44c:	4628      	mov	r0, r5
 23ff44e:	f7ff ffec 	bl	23ff42a <_ZN5Print7printlnEv>
  return n;
}
 23ff452:	4420      	add	r0, r4
 23ff454:	bd38      	pop	{r3, r4, r5, pc}

023ff456 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff456:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff458:	2a01      	cmp	r2, #1
 23ff45a:	bf98      	it	ls
 23ff45c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff45e:	b530      	push	{r4, r5, lr}
 23ff460:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff462:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff466:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff468:	460d      	mov	r5, r1
 23ff46a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff46e:	fb01 5312 	mls	r3, r1, r2, r5
 23ff472:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff476:	2b09      	cmp	r3, #9
 23ff478:	bf94      	ite	ls
 23ff47a:	3330      	addls	r3, #48	; 0x30
 23ff47c:	3337      	addhi	r3, #55	; 0x37
 23ff47e:	b2db      	uxtb	r3, r3
  } while(n);
 23ff480:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff482:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff486:	d9ef      	bls.n	23ff468 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff488:	4621      	mov	r1, r4
 23ff48a:	f7ff ffb9 	bl	23ff400 <_ZN5Print5writeEPKc>
}
 23ff48e:	b00b      	add	sp, #44	; 0x2c
 23ff490:	bd30      	pop	{r4, r5, pc}
	...

023ff494 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff494:	2200      	movs	r2, #0
 23ff496:	4b01      	ldr	r3, [pc, #4]	; (23ff49c <_GLOBAL__sub_I_RGB+0x8>)
 23ff498:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff49a:	4770      	bx	lr
 23ff49c:	1007ae98 	.word	0x1007ae98

023ff4a0 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 23ff4a0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 23ff4a4:	4a03      	ldr	r2, [pc, #12]	; (23ff4b4 <_ZN5Servo11resetFieldsEv+0x14>)
 23ff4a6:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 23ff4aa:	23b4      	movs	r3, #180	; 0xb4
 23ff4ac:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
 23ff4ae:	2300      	movs	r3, #0
 23ff4b0:	60c3      	str	r3, [r0, #12]
}
 23ff4b2:	4770      	bx	lr
 23ff4b4:	0220ffff 	.word	0x0220ffff

023ff4b8 <_ZN5ServoC1Ev>:
Servo::Servo()
 23ff4b8:	b508      	push	{r3, lr}
  this->resetFields();
 23ff4ba:	f7ff fff1 	bl	23ff4a0 <_ZN5Servo11resetFieldsEv>
}
 23ff4be:	bd08      	pop	{r3, pc}

023ff4c0 <_ZN5Servo6detachEv>:
{
 23ff4c0:	b510      	push	{r4, lr}
 23ff4c2:	4604      	mov	r4, r0
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
 23ff4c4:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 23ff4c8:	1c43      	adds	r3, r0, #1
 23ff4ca:	d007      	beq.n	23ff4dc <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
 23ff4cc:	b280      	uxth	r0, r0
 23ff4ce:	f7ff fb99 	bl	23fec04 <HAL_Servo_Detach>
  this->resetFields();
 23ff4d2:	4620      	mov	r0, r4
 23ff4d4:	f7ff ffe4 	bl	23ff4a0 <_ZN5Servo11resetFieldsEv>
  return true;
 23ff4d8:	2001      	movs	r0, #1
}
 23ff4da:	bd10      	pop	{r4, pc}
    return false;
 23ff4dc:	2000      	movs	r0, #0
 23ff4de:	e7fc      	b.n	23ff4da <_ZN5Servo6detachEv+0x1a>

023ff4e0 <_ZN5Servo6attachEtttss>:
{
 23ff4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff4e4:	460d      	mov	r5, r1
 23ff4e6:	4604      	mov	r4, r0
  if (hal_pin_validate_function(pin, PF_TIMER)!=PF_TIMER)
 23ff4e8:	2102      	movs	r1, #2
 23ff4ea:	4628      	mov	r0, r5
{
 23ff4ec:	4690      	mov	r8, r2
 23ff4ee:	461f      	mov	r7, r3
  if (hal_pin_validate_function(pin, PF_TIMER)!=PF_TIMER)
 23ff4f0:	f7ff fa9a 	bl	23fea28 <hal_pin_validate_function>
 23ff4f4:	2802      	cmp	r0, #2
 23ff4f6:	d003      	beq.n	23ff500 <_ZN5Servo6attachEtttss+0x20>
    return false;
 23ff4f8:	2600      	movs	r6, #0
}
 23ff4fa:	4630      	mov	r0, r6
 23ff4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
 23ff500:	4628      	mov	r0, r5
 23ff502:	f000 f9fd 	bl	23ff900 <pinAvailable>
 23ff506:	4606      	mov	r6, r0
 23ff508:	2800      	cmp	r0, #0
 23ff50a:	d0f5      	beq.n	23ff4f8 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
 23ff50c:	f9b4 3000 	ldrsh.w	r3, [r4]
 23ff510:	3301      	adds	r3, #1
 23ff512:	d002      	beq.n	23ff51a <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
 23ff514:	4620      	mov	r0, r4
 23ff516:	f7ff ffd3 	bl	23ff4c0 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
 23ff51a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  HAL_Servo_Attach(this->pin);
 23ff51e:	4628      	mov	r0, r5
  this->minAngle = minAngle;
 23ff520:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 23ff522:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
 23ff526:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
 23ff528:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 23ff52c:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
 23ff52e:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
 23ff530:	f7ff fb5a 	bl	23febe8 <HAL_Servo_Attach>
  return true;
 23ff534:	e7e1      	b.n	23ff4fa <_ZN5Servo6attachEtttss+0x1a>

023ff536 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff536:	b510      	push	{r4, lr}
 23ff538:	4604      	mov	r4, r0
 23ff53a:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff53c:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff53e:	f7ff fb6f 	bl	23fec20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff542:	2300      	movs	r3, #0
}
 23ff544:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff546:	6063      	str	r3, [r4, #4]
}
 23ff548:	bd10      	pop	{r4, pc}
	...

023ff54c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff54c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff54e:	2000      	movs	r0, #0
 23ff550:	4b04      	ldr	r3, [pc, #16]	; (23ff564 <_GLOBAL__sub_I_System+0x18>)
 23ff552:	601a      	str	r2, [r3, #0]
 23ff554:	4b04      	ldr	r3, [pc, #16]	; (23ff568 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff556:	4a05      	ldr	r2, [pc, #20]	; (23ff56c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff558:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff55c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff55e:	f7ff bc4d 	b.w	23fedfc <set_system_mode>
 23ff562:	bf00      	nop
 23ff564:	1007aeb4 	.word	0x1007aeb4
 23ff568:	1007aea8 	.word	0x1007aea8
 23ff56c:	ffff0000 	.word	0xffff0000

023ff570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff570:	4b02      	ldr	r3, [pc, #8]	; (23ff57c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff572:	681a      	ldr	r2, [r3, #0]
 23ff574:	4b02      	ldr	r3, [pc, #8]	; (23ff580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff576:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff578:	4770      	bx	lr
 23ff57a:	bf00      	nop
 23ff57c:	1007ada0 	.word	0x1007ada0
 23ff580:	1007aeb8 	.word	0x1007aeb8

023ff584 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff584:	4770      	bx	lr

023ff586 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff586:	7441      	strb	r1, [r0, #17]
}
 23ff588:	4770      	bx	lr

023ff58a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff58a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff58c:	7c00      	ldrb	r0, [r0, #16]
 23ff58e:	f7ff fbb7 	bl	23fed00 <hal_usart_available_data_for_write>
}
 23ff592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff596:	bd08      	pop	{r3, pc}

023ff598 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff598:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff59a:	7c00      	ldrb	r0, [r0, #16]
 23ff59c:	f7ff fb6a 	bl	23fec74 <hal_usart_available>
}
 23ff5a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5a4:	bd08      	pop	{r3, pc}

023ff5a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff5a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff5a8:	7c00      	ldrb	r0, [r0, #16]
 23ff5aa:	f7ff fb7f 	bl	23fecac <hal_usart_peek>
}
 23ff5ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5b2:	bd08      	pop	{r3, pc}

023ff5b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff5b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff5b6:	7c00      	ldrb	r0, [r0, #16]
 23ff5b8:	f7ff fb6a 	bl	23fec90 <hal_usart_read>
}
 23ff5bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5c0:	bd08      	pop	{r3, pc}

023ff5c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff5c2:	7c00      	ldrb	r0, [r0, #16]
 23ff5c4:	f7ff bb80 	b.w	23fecc8 <hal_usart_flush>

023ff5c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff5ca:	7c45      	ldrb	r5, [r0, #17]
{
 23ff5cc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff5ce:	b12d      	cbz	r5, 23ff5dc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff5d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff5d2:	b003      	add	sp, #12
 23ff5d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff5d8:	f7ff bb3e 	b.w	23fec58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff5dc:	7c00      	ldrb	r0, [r0, #16]
 23ff5de:	9101      	str	r1, [sp, #4]
 23ff5e0:	f7ff fb8e 	bl	23fed00 <hal_usart_available_data_for_write>
 23ff5e4:	2800      	cmp	r0, #0
 23ff5e6:	9901      	ldr	r1, [sp, #4]
 23ff5e8:	dcf2      	bgt.n	23ff5d0 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff5ea:	4628      	mov	r0, r5
 23ff5ec:	b003      	add	sp, #12
 23ff5ee:	bd30      	pop	{r4, r5, pc}

023ff5f0 <_ZN11USARTSerialD0Ev>:
 23ff5f0:	b510      	push	{r4, lr}
 23ff5f2:	4604      	mov	r4, r0
 23ff5f4:	2114      	movs	r1, #20
 23ff5f6:	f7fe ffbe 	bl	23fe576 <_ZdlPvj>
 23ff5fa:	4620      	mov	r0, r4
 23ff5fc:	bd10      	pop	{r4, pc}
	...

023ff600 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff600:	b510      	push	{r4, lr}
 23ff602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff606:	4604      	mov	r4, r0
 23ff608:	4608      	mov	r0, r1
 23ff60a:	4611      	mov	r1, r2
 23ff60c:	2200      	movs	r2, #0
 23ff60e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff612:	4b04      	ldr	r3, [pc, #16]	; (23ff624 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff614:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff616:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff618:	2301      	movs	r3, #1
 23ff61a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff61c:	f7ff fb7e 	bl	23fed1c <hal_usart_init_ex>
}
 23ff620:	4620      	mov	r0, r4
 23ff622:	bd10      	pop	{r4, pc}
 23ff624:	023ffec4 	.word	0x023ffec4

023ff628 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff628:	7c00      	ldrb	r0, [r0, #16]
 23ff62a:	f7ff bb5b 	b.w	23fece4 <hal_usart_is_enabled>

023ff62e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff62e:	7441      	strb	r1, [r0, #17]
}
 23ff630:	4770      	bx	lr

023ff632 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff632:	4770      	bx	lr

023ff634 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff634:	4770      	bx	lr

023ff636 <_ZN9USBSerial4readEv>:
{
 23ff636:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff638:	2100      	movs	r1, #0
 23ff63a:	7c00      	ldrb	r0, [r0, #16]
 23ff63c:	f7ff fbb4 	bl	23feda8 <HAL_USB_USART_Receive_Data>
}
 23ff640:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff644:	bd08      	pop	{r3, pc}

023ff646 <_ZN9USBSerial4peekEv>:
{
 23ff646:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff648:	2101      	movs	r1, #1
 23ff64a:	7c00      	ldrb	r0, [r0, #16]
 23ff64c:	f7ff fbac 	bl	23feda8 <HAL_USB_USART_Receive_Data>
}
 23ff650:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff654:	bd08      	pop	{r3, pc}

023ff656 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff656:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff658:	7c00      	ldrb	r0, [r0, #16]
 23ff65a:	f7ff fb97 	bl	23fed8c <HAL_USB_USART_Available_Data_For_Write>
}
 23ff65e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff662:	bd08      	pop	{r3, pc}

023ff664 <_ZN9USBSerial9availableEv>:
{
 23ff664:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff666:	7c00      	ldrb	r0, [r0, #16]
 23ff668:	f7ff fb82 	bl	23fed70 <HAL_USB_USART_Available_Data>
}
 23ff66c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff670:	bd08      	pop	{r3, pc}

023ff672 <_ZN9USBSerial5writeEh>:
{
 23ff672:	b513      	push	{r0, r1, r4, lr}
 23ff674:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff676:	7c00      	ldrb	r0, [r0, #16]
{
 23ff678:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff67a:	f7ff fb87 	bl	23fed8c <HAL_USB_USART_Available_Data_For_Write>
 23ff67e:	2800      	cmp	r0, #0
 23ff680:	9901      	ldr	r1, [sp, #4]
 23ff682:	dc01      	bgt.n	23ff688 <_ZN9USBSerial5writeEh+0x16>
 23ff684:	7c60      	ldrb	r0, [r4, #17]
 23ff686:	b120      	cbz	r0, 23ff692 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff688:	7c20      	ldrb	r0, [r4, #16]
 23ff68a:	f7ff fb9b 	bl	23fedc4 <HAL_USB_USART_Send_Data>
 23ff68e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff692:	b002      	add	sp, #8
 23ff694:	bd10      	pop	{r4, pc}

023ff696 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff696:	7c00      	ldrb	r0, [r0, #16]
 23ff698:	f7ff bba2 	b.w	23fede0 <HAL_USB_USART_Flush_Data>

023ff69c <_ZN9USBSerialD0Ev>:
 23ff69c:	b510      	push	{r4, lr}
 23ff69e:	4604      	mov	r4, r0
 23ff6a0:	2114      	movs	r1, #20
 23ff6a2:	f7fe ff68 	bl	23fe576 <_ZdlPvj>
 23ff6a6:	4620      	mov	r0, r4
 23ff6a8:	bd10      	pop	{r4, pc}
	...

023ff6ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff6ac:	b510      	push	{r4, lr}
 23ff6ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff6b2:	4604      	mov	r4, r0
 23ff6b4:	4608      	mov	r0, r1
 23ff6b6:	2100      	movs	r1, #0
 23ff6b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff6bc:	4b04      	ldr	r3, [pc, #16]	; (23ff6d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff6be:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff6c0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff6c2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff6c4:	4611      	mov	r1, r2
  _blocking = true;
 23ff6c6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff6c8:	f7ff fb36 	bl	23fed38 <HAL_USB_USART_Init>
}
 23ff6cc:	4620      	mov	r0, r4
 23ff6ce:	bd10      	pop	{r4, pc}
 23ff6d0:	023ffef4 	.word	0x023ffef4

023ff6d4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff6d4:	2200      	movs	r2, #0
 23ff6d6:	7c00      	ldrb	r0, [r0, #16]
 23ff6d8:	f7ff bb3c 	b.w	23fed54 <HAL_USB_USART_Begin>

023ff6dc <_Z19acquireSerialBufferv>:
{
 23ff6dc:	b510      	push	{r4, lr}
 23ff6de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff6e0:	2214      	movs	r2, #20
 23ff6e2:	2100      	movs	r1, #0
 23ff6e4:	f000 faaf 	bl	23ffc46 <memset>
}
 23ff6e8:	4620      	mov	r0, r4
 23ff6ea:	bd10      	pop	{r4, pc}

023ff6ec <_Z16_fetch_usbserialv>:
{
 23ff6ec:	b510      	push	{r4, lr}
 23ff6ee:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff6f0:	a803      	add	r0, sp, #12
 23ff6f2:	f7ff fff3 	bl	23ff6dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff6f6:	4c0c      	ldr	r4, [pc, #48]	; (23ff728 <_Z16_fetch_usbserialv+0x3c>)
 23ff6f8:	e8d4 1f8f 	ldab	r1, [r4]
 23ff6fc:	f011 0101 	ands.w	r1, r1, #1
 23ff700:	d10f      	bne.n	23ff722 <_Z16_fetch_usbserialv+0x36>
 23ff702:	4620      	mov	r0, r4
 23ff704:	9101      	str	r1, [sp, #4]
 23ff706:	f7fe ff38 	bl	23fe57a <__cxa_guard_acquire>
 23ff70a:	9901      	ldr	r1, [sp, #4]
 23ff70c:	b148      	cbz	r0, 23ff722 <_Z16_fetch_usbserialv+0x36>
 23ff70e:	aa03      	add	r2, sp, #12
 23ff710:	4806      	ldr	r0, [pc, #24]	; (23ff72c <_Z16_fetch_usbserialv+0x40>)
 23ff712:	f7ff ffcb 	bl	23ff6ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff716:	4620      	mov	r0, r4
 23ff718:	f7fe ff34 	bl	23fe584 <__cxa_guard_release>
 23ff71c:	4804      	ldr	r0, [pc, #16]	; (23ff730 <_Z16_fetch_usbserialv+0x44>)
 23ff71e:	f000 fa7f 	bl	23ffc20 <atexit>
	return _usbserial;
}
 23ff722:	4802      	ldr	r0, [pc, #8]	; (23ff72c <_Z16_fetch_usbserialv+0x40>)
 23ff724:	b008      	add	sp, #32
 23ff726:	bd10      	pop	{r4, pc}
 23ff728:	1007aebc 	.word	0x1007aebc
 23ff72c:	1007aec0 	.word	0x1007aec0
 23ff730:	023ff633 	.word	0x023ff633

023ff734 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff734:	2200      	movs	r2, #0
 23ff736:	6840      	ldr	r0, [r0, #4]
 23ff738:	4611      	mov	r1, r2
 23ff73a:	f7ff bbcf 	b.w	23feedc <network_ready>

023ff73e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff73e:	2200      	movs	r2, #0
 23ff740:	6840      	ldr	r0, [r0, #4]
 23ff742:	4611      	mov	r1, r2
 23ff744:	f7ff bc02 	b.w	23fef4c <network_listening>

023ff748 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff748:	2200      	movs	r2, #0
 23ff74a:	6840      	ldr	r0, [r0, #4]
 23ff74c:	4611      	mov	r1, r2
 23ff74e:	f7ff bc19 	b.w	23fef84 <network_get_listen_timeout>

023ff752 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff752:	2200      	movs	r2, #0
 23ff754:	6840      	ldr	r0, [r0, #4]
 23ff756:	f7ff bc07 	b.w	23fef68 <network_set_listen_timeout>

023ff75a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff75a:	2200      	movs	r2, #0
 23ff75c:	6840      	ldr	r0, [r0, #4]
 23ff75e:	f081 0101 	eor.w	r1, r1, #1
 23ff762:	f7ff bbe5 	b.w	23fef30 <network_listen>

023ff766 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff766:	2300      	movs	r3, #0
 23ff768:	6840      	ldr	r0, [r0, #4]
 23ff76a:	461a      	mov	r2, r3
 23ff76c:	4619      	mov	r1, r3
 23ff76e:	f7ff bbd1 	b.w	23fef14 <network_off>

023ff772 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff772:	2300      	movs	r3, #0
 23ff774:	6840      	ldr	r0, [r0, #4]
 23ff776:	461a      	mov	r2, r3
 23ff778:	4619      	mov	r1, r3
 23ff77a:	f7ff bbbd 	b.w	23feef8 <network_on>

023ff77e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff77e:	2200      	movs	r2, #0
 23ff780:	6840      	ldr	r0, [r0, #4]
 23ff782:	4611      	mov	r1, r2
 23ff784:	f7ff bb8e 	b.w	23feea4 <network_connecting>

023ff788 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff788:	2200      	movs	r2, #0
 23ff78a:	2102      	movs	r1, #2
 23ff78c:	6840      	ldr	r0, [r0, #4]
 23ff78e:	f7ff bb97 	b.w	23feec0 <network_disconnect>

023ff792 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff792:	2300      	movs	r3, #0
 23ff794:	6840      	ldr	r0, [r0, #4]
 23ff796:	461a      	mov	r2, r3
 23ff798:	f7ff bb76 	b.w	23fee88 <network_connect>

023ff79c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff79c:	2204      	movs	r2, #4
 23ff79e:	4b02      	ldr	r3, [pc, #8]	; (23ff7a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff7a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff7a2:	4a02      	ldr	r2, [pc, #8]	; (23ff7ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff7a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff7a6:	4770      	bx	lr
 23ff7a8:	1007aed4 	.word	0x1007aed4
 23ff7ac:	023fff24 	.word	0x023fff24

023ff7b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff7b0:	4b01      	ldr	r3, [pc, #4]	; (23ff7b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff7b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff7b4:	4770      	bx	lr
 23ff7b6:	bf00      	nop
 23ff7b8:	1007ada4 	.word	0x1007ada4

023ff7bc <serialEventRun>:
{
 23ff7bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff7be:	4b0f      	ldr	r3, [pc, #60]	; (23ff7fc <serialEventRun+0x40>)
 23ff7c0:	b143      	cbz	r3, 23ff7d4 <serialEventRun+0x18>
 23ff7c2:	f7ff ff93 	bl	23ff6ec <_Z16_fetch_usbserialv>
 23ff7c6:	6803      	ldr	r3, [r0, #0]
 23ff7c8:	691b      	ldr	r3, [r3, #16]
 23ff7ca:	4798      	blx	r3
 23ff7cc:	2800      	cmp	r0, #0
 23ff7ce:	dd01      	ble.n	23ff7d4 <serialEventRun+0x18>
        serialEvent();
 23ff7d0:	e000      	b.n	23ff7d4 <serialEventRun+0x18>
 23ff7d2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff7d4:	4b0a      	ldr	r3, [pc, #40]	; (23ff800 <serialEventRun+0x44>)
 23ff7d6:	b143      	cbz	r3, 23ff7ea <serialEventRun+0x2e>
 23ff7d8:	f000 f990 	bl	23ffafc <_Z22__fetch_global_Serial1v>
 23ff7dc:	6803      	ldr	r3, [r0, #0]
 23ff7de:	691b      	ldr	r3, [r3, #16]
 23ff7e0:	4798      	blx	r3
 23ff7e2:	2800      	cmp	r0, #0
 23ff7e4:	dd01      	ble.n	23ff7ea <serialEventRun+0x2e>
        serialEvent1();
 23ff7e6:	e000      	b.n	23ff7ea <serialEventRun+0x2e>
 23ff7e8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff7ea:	4b06      	ldr	r3, [pc, #24]	; (23ff804 <serialEventRun+0x48>)
 23ff7ec:	b10b      	cbz	r3, 23ff7f2 <serialEventRun+0x36>
 23ff7ee:	f000 f9cb 	bl	23ffb88 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff7f2:	4b05      	ldr	r3, [pc, #20]	; (23ff808 <serialEventRun+0x4c>)
 23ff7f4:	b10b      	cbz	r3, 23ff7fa <serialEventRun+0x3e>
 23ff7f6:	f000 f9fd 	bl	23ffbf4 <_Z15serialEventRun3v>
}
 23ff7fa:	bd08      	pop	{r3, pc}
	...

023ff80c <_post_loop>:
{
 23ff80c:	b508      	push	{r3, lr}
	serialEventRun();
 23ff80e:	f7ff ffd5 	bl	23ff7bc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff812:	f7ff f8df 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff816:	4b01      	ldr	r3, [pc, #4]	; (23ff81c <_post_loop+0x10>)
 23ff818:	6018      	str	r0, [r3, #0]
}
 23ff81a:	bd08      	pop	{r3, pc}
 23ff81c:	1007aef0 	.word	0x1007aef0

023ff820 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff820:	4805      	ldr	r0, [pc, #20]	; (23ff838 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff822:	4a06      	ldr	r2, [pc, #24]	; (23ff83c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff824:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff826:	1a12      	subs	r2, r2, r0
 23ff828:	4905      	ldr	r1, [pc, #20]	; (23ff840 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff82a:	f000 f9ff 	bl	23ffc2c <memcpy>
    __backup_sram_signature = signature;
 23ff82e:	4b05      	ldr	r3, [pc, #20]	; (23ff844 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff830:	4a05      	ldr	r2, [pc, #20]	; (23ff848 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff832:	601a      	str	r2, [r3, #0]
}
 23ff834:	bd08      	pop	{r3, pc}
 23ff836:	bf00      	nop
 23ff838:	1007b400 	.word	0x1007b400
 23ff83c:	1007b404 	.word	0x1007b404
 23ff840:	085ffbf0 	.word	0x085ffbf0
 23ff844:	1007b400 	.word	0x1007b400
 23ff848:	9a271c1e 	.word	0x9a271c1e

023ff84c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff84c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff84e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff850:	461a      	mov	r2, r3
 23ff852:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff856:	9300      	str	r3, [sp, #0]
 23ff858:	f7ff fafa 	bl	23fee50 <system_ctrl_set_result>
}
 23ff85c:	b003      	add	sp, #12
 23ff85e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff864 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff864:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff866:	8843      	ldrh	r3, [r0, #2]
 23ff868:	2b0a      	cmp	r3, #10
 23ff86a:	d008      	beq.n	23ff87e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff86c:	2b50      	cmp	r3, #80	; 0x50
 23ff86e:	d10b      	bne.n	23ff888 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff870:	4b09      	ldr	r3, [pc, #36]	; (23ff898 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff872:	681b      	ldr	r3, [r3, #0]
 23ff874:	b14b      	cbz	r3, 23ff88a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff876:	b003      	add	sp, #12
 23ff878:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff87c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff87e:	f7ff ffe5 	bl	23ff84c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff882:	b003      	add	sp, #12
 23ff884:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff888:	2300      	movs	r3, #0
 23ff88a:	461a      	mov	r2, r3
 23ff88c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff890:	9300      	str	r3, [sp, #0]
 23ff892:	f7ff fadd 	bl	23fee50 <system_ctrl_set_result>
}
 23ff896:	e7f4      	b.n	23ff882 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff898:	1007aee0 	.word	0x1007aee0

023ff89c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff89c:	2100      	movs	r1, #0
{
 23ff89e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff8a0:	4811      	ldr	r0, [pc, #68]	; (23ff8e8 <module_user_init_hook+0x4c>)
 23ff8a2:	f7ff fbc3 	bl	23ff02c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff8a6:	4b11      	ldr	r3, [pc, #68]	; (23ff8ec <module_user_init_hook+0x50>)
 23ff8a8:	681a      	ldr	r2, [r3, #0]
 23ff8aa:	4b11      	ldr	r3, [pc, #68]	; (23ff8f0 <module_user_init_hook+0x54>)
 23ff8ac:	429a      	cmp	r2, r3
 23ff8ae:	bf0c      	ite	eq
 23ff8b0:	2201      	moveq	r2, #1
 23ff8b2:	2200      	movne	r2, #0
 23ff8b4:	4b0f      	ldr	r3, [pc, #60]	; (23ff8f4 <module_user_init_hook+0x58>)
 23ff8b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff8b8:	d001      	beq.n	23ff8be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff8ba:	f7ff ffb1 	bl	23ff820 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff8be:	f7ff f86d 	bl	23fe99c <HAL_RNG_GetRandomNumber>
 23ff8c2:	4604      	mov	r4, r0
    srand(seed);
 23ff8c4:	f000 f9c8 	bl	23ffc58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff8c8:	4b0b      	ldr	r3, [pc, #44]	; (23ff8f8 <module_user_init_hook+0x5c>)
 23ff8ca:	b113      	cbz	r3, 23ff8d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff8cc:	4620      	mov	r0, r4
 23ff8ce:	e000      	b.n	23ff8d2 <module_user_init_hook+0x36>
 23ff8d0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff8d2:	2100      	movs	r1, #0
 23ff8d4:	4808      	ldr	r0, [pc, #32]	; (23ff8f8 <module_user_init_hook+0x5c>)
 23ff8d6:	f7ff fac9 	bl	23fee6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff8de:	2100      	movs	r1, #0
 23ff8e0:	4806      	ldr	r0, [pc, #24]	; (23ff8fc <module_user_init_hook+0x60>)
 23ff8e2:	f7ff baa7 	b.w	23fee34 <system_ctrl_set_app_request_handler>
 23ff8e6:	bf00      	nop
 23ff8e8:	023ff7b1 	.word	0x023ff7b1
 23ff8ec:	1007b400 	.word	0x1007b400
 23ff8f0:	9a271c1e 	.word	0x9a271c1e
 23ff8f4:	1007aedc 	.word	0x1007aedc
 23ff8f8:	00000000 	.word	0x00000000
 23ff8fc:	023ff865 	.word	0x023ff865

023ff900 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff900:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff902:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff904:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff906:	d902      	bls.n	23ff90e <pinAvailable+0xe>
    return false;
 23ff908:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff90a:	b003      	add	sp, #12
 23ff90c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff90e:	f1a0 030f 	sub.w	r3, r0, #15
 23ff912:	2b02      	cmp	r3, #2
 23ff914:	d90b      	bls.n	23ff92e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff916:	2801      	cmp	r0, #1
 23ff918:	d821      	bhi.n	23ff95e <pinAvailable+0x5e>
 23ff91a:	f000 f89b 	bl	23ffa54 <_Z19__fetch_global_Wirev>
 23ff91e:	2100      	movs	r1, #0
 23ff920:	7c00      	ldrb	r0, [r0, #16]
 23ff922:	f7ff f91b 	bl	23feb5c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff926:	f080 0001 	eor.w	r0, r0, #1
 23ff92a:	b2c0      	uxtb	r0, r0
 23ff92c:	e7ed      	b.n	23ff90a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff92e:	4d11      	ldr	r5, [pc, #68]	; (23ff974 <pinAvailable+0x74>)
 23ff930:	e8d5 1f8f 	ldab	r1, [r5]
 23ff934:	f011 0101 	ands.w	r1, r1, #1
 23ff938:	d10b      	bne.n	23ff952 <pinAvailable+0x52>
 23ff93a:	4628      	mov	r0, r5
 23ff93c:	9101      	str	r1, [sp, #4]
 23ff93e:	f7fe fe1c 	bl	23fe57a <__cxa_guard_acquire>
 23ff942:	9901      	ldr	r1, [sp, #4]
 23ff944:	b128      	cbz	r0, 23ff952 <pinAvailable+0x52>
 23ff946:	480c      	ldr	r0, [pc, #48]	; (23ff978 <pinAvailable+0x78>)
 23ff948:	f7ff fdf5 	bl	23ff536 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff94c:	4628      	mov	r0, r5
 23ff94e:	f7fe fe19 	bl	23fe584 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff952:	4b09      	ldr	r3, [pc, #36]	; (23ff978 <pinAvailable+0x78>)
 23ff954:	7818      	ldrb	r0, [r3, #0]
 23ff956:	f7ff f971 	bl	23fec3c <hal_spi_is_enabled>
 23ff95a:	2800      	cmp	r0, #0
 23ff95c:	d1d4      	bne.n	23ff908 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff95e:	3c08      	subs	r4, #8
 23ff960:	2c01      	cmp	r4, #1
 23ff962:	d805      	bhi.n	23ff970 <pinAvailable+0x70>
 23ff964:	f000 f8ca 	bl	23ffafc <_Z22__fetch_global_Serial1v>
 23ff968:	7c00      	ldrb	r0, [r0, #16]
 23ff96a:	f7ff f9bb 	bl	23fece4 <hal_usart_is_enabled>
 23ff96e:	e7da      	b.n	23ff926 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff970:	2001      	movs	r0, #1
 23ff972:	e7ca      	b.n	23ff90a <pinAvailable+0xa>
 23ff974:	1007aee4 	.word	0x1007aee4
 23ff978:	1007aee8 	.word	0x1007aee8

023ff97c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff97c:	281b      	cmp	r0, #27
{
 23ff97e:	b538      	push	{r3, r4, r5, lr}
 23ff980:	4604      	mov	r4, r0
 23ff982:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff984:	d80a      	bhi.n	23ff99c <pinMode+0x20>
 23ff986:	29ff      	cmp	r1, #255	; 0xff
 23ff988:	d008      	beq.n	23ff99c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff98a:	f7ff ffb9 	bl	23ff900 <pinAvailable>
 23ff98e:	b128      	cbz	r0, 23ff99c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff990:	4629      	mov	r1, r5
 23ff992:	4620      	mov	r0, r4
}
 23ff994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff998:	f7ff b854 	b.w	23fea44 <hal_gpio_mode>
}
 23ff99c:	bd38      	pop	{r3, r4, r5, pc}

023ff99e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff99e:	b538      	push	{r3, r4, r5, lr}
 23ff9a0:	4604      	mov	r4, r0
 23ff9a2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff9a4:	f7ff f85c 	bl	23fea60 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff9a8:	28ff      	cmp	r0, #255	; 0xff
 23ff9aa:	d010      	beq.n	23ff9ce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff9ac:	2806      	cmp	r0, #6
 23ff9ae:	d804      	bhi.n	23ff9ba <digitalWrite+0x1c>
 23ff9b0:	234d      	movs	r3, #77	; 0x4d
 23ff9b2:	fa23 f000 	lsr.w	r0, r3, r0
 23ff9b6:	07c3      	lsls	r3, r0, #31
 23ff9b8:	d409      	bmi.n	23ff9ce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff9ba:	4620      	mov	r0, r4
 23ff9bc:	f7ff ffa0 	bl	23ff900 <pinAvailable>
 23ff9c0:	b128      	cbz	r0, 23ff9ce <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff9c2:	4629      	mov	r1, r5
 23ff9c4:	4620      	mov	r0, r4
}
 23ff9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff9ca:	f7ff b857 	b.w	23fea7c <hal_gpio_write>
}
 23ff9ce:	bd38      	pop	{r3, r4, r5, pc}

023ff9d0 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
 23ff9d0:	b538      	push	{r3, r4, r5, lr}
 23ff9d2:	4604      	mov	r4, r0
 23ff9d4:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 23ff9d6:	f7ff ff93 	bl	23ff900 <pinAvailable>
 23ff9da:	b1f0      	cbz	r0, 23ffa1a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23ff9dc:	2104      	movs	r1, #4
 23ff9de:	4620      	mov	r0, r4
 23ff9e0:	f7ff f822 	bl	23fea28 <hal_pin_validate_function>
 23ff9e4:	2804      	cmp	r0, #4
 23ff9e6:	d105      	bne.n	23ff9f4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 23ff9e8:	4620      	mov	r0, r4
 23ff9ea:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 23ff9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 23ff9f0:	f7ff b852 	b.w	23fea98 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23ff9f4:	2102      	movs	r1, #2
 23ff9f6:	4620      	mov	r0, r4
 23ff9f8:	f7ff f816 	bl	23fea28 <hal_pin_validate_function>
 23ff9fc:	2802      	cmp	r0, #2
 23ff9fe:	d10c      	bne.n	23ffa1a <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
 23ffa00:	4620      	mov	r0, r4
 23ffa02:	f7ff f82d 	bl	23fea60 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23ffa06:	2801      	cmp	r0, #1
 23ffa08:	d001      	beq.n	23ffa0e <_Z11analogWritetm+0x3e>
 23ffa0a:	2804      	cmp	r0, #4
 23ffa0c:	d105      	bne.n	23ffa1a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 23ffa0e:	4629      	mov	r1, r5
 23ffa10:	4620      	mov	r0, r4
}
 23ffa12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 23ffa16:	f7ff b84d 	b.w	23feab4 <hal_pwm_write_ext>
}
 23ffa1a:	bd38      	pop	{r3, r4, r5, pc}

023ffa1c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa1c:	4770      	bx	lr
	...

023ffa20 <_Z17acquireWireBufferv>:
{
 23ffa20:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa22:	4b0a      	ldr	r3, [pc, #40]	; (23ffa4c <_Z17acquireWireBufferv+0x2c>)
{
 23ffa24:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa26:	6003      	str	r3, [r0, #0]
 23ffa28:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa2a:	4909      	ldr	r1, [pc, #36]	; (23ffa50 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa2c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa2e:	2020      	movs	r0, #32
 23ffa30:	f000 f8f4 	bl	23ffc1c <_ZnajRKSt9nothrow_t>
	};
 23ffa34:	2520      	movs	r5, #32
 23ffa36:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa38:	4905      	ldr	r1, [pc, #20]	; (23ffa50 <_Z17acquireWireBufferv+0x30>)
 23ffa3a:	4628      	mov	r0, r5
	};
 23ffa3c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa3e:	f000 f8ed 	bl	23ffc1c <_ZnajRKSt9nothrow_t>
	};
 23ffa42:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffa46:	4620      	mov	r0, r4
 23ffa48:	bd38      	pop	{r3, r4, r5, pc}
 23ffa4a:	bf00      	nop
 23ffa4c:	00010018 	.word	0x00010018
 23ffa50:	023fff58 	.word	0x023fff58

023ffa54 <_Z19__fetch_global_Wirev>:
{
 23ffa54:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa56:	4d0e      	ldr	r5, [pc, #56]	; (23ffa90 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffa58:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa5a:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa5e:	f011 0401 	ands.w	r4, r1, #1
 23ffa62:	d111      	bne.n	23ffa88 <_Z19__fetch_global_Wirev+0x34>
 23ffa64:	4628      	mov	r0, r5
 23ffa66:	f7fe fd88 	bl	23fe57a <__cxa_guard_acquire>
 23ffa6a:	b168      	cbz	r0, 23ffa88 <_Z19__fetch_global_Wirev+0x34>
 23ffa6c:	4668      	mov	r0, sp
 23ffa6e:	f7ff ffd7 	bl	23ffa20 <_Z17acquireWireBufferv>
 23ffa72:	466a      	mov	r2, sp
 23ffa74:	4621      	mov	r1, r4
 23ffa76:	4807      	ldr	r0, [pc, #28]	; (23ffa94 <_Z19__fetch_global_Wirev+0x40>)
 23ffa78:	f7ff fb5c 	bl	23ff134 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffa7c:	4628      	mov	r0, r5
 23ffa7e:	f7fe fd81 	bl	23fe584 <__cxa_guard_release>
 23ffa82:	4805      	ldr	r0, [pc, #20]	; (23ffa98 <_Z19__fetch_global_Wirev+0x44>)
 23ffa84:	f000 f8cc 	bl	23ffc20 <atexit>
	return wire;
}
 23ffa88:	4802      	ldr	r0, [pc, #8]	; (23ffa94 <_Z19__fetch_global_Wirev+0x40>)
 23ffa8a:	b007      	add	sp, #28
 23ffa8c:	bd30      	pop	{r4, r5, pc}
 23ffa8e:	bf00      	nop
 23ffa90:	1007aef4 	.word	0x1007aef4
 23ffa94:	1007aef8 	.word	0x1007aef8
 23ffa98:	023ffa1d 	.word	0x023ffa1d

023ffa9c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa9c:	4770      	bx	lr
	...

023ffaa0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffaa0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffaa2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffaa4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffaa6:	462a      	mov	r2, r5
 23ffaa8:	2100      	movs	r1, #0
 23ffaaa:	f000 f8cc 	bl	23ffc46 <memset>
 23ffaae:	8025      	strh	r5, [r4, #0]
 23ffab0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffab2:	4907      	ldr	r1, [pc, #28]	; (23ffad0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffab4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffab6:	8125      	strh	r5, [r4, #8]
 23ffab8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffaba:	f000 f8af 	bl	23ffc1c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffabe:	4904      	ldr	r1, [pc, #16]	; (23ffad0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffac0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffac2:	4628      	mov	r0, r5
 23ffac4:	f000 f8aa 	bl	23ffc1c <_ZnajRKSt9nothrow_t>
    };
 23ffac8:	60e0      	str	r0, [r4, #12]
}
 23ffaca:	4620      	mov	r0, r4
 23ffacc:	bd38      	pop	{r3, r4, r5, pc}
 23fface:	bf00      	nop
 23ffad0:	023fff58 	.word	0x023fff58

023ffad4 <__tcf_2>:
 23ffad4:	4770      	bx	lr

023ffad6 <__tcf_1>:
 23ffad6:	4770      	bx	lr

023ffad8 <_Z20acquireSerial1Bufferv>:
{
 23ffad8:	b510      	push	{r4, lr}
 23ffada:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffadc:	f7ff ffe0 	bl	23ffaa0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffae0:	4620      	mov	r0, r4
 23ffae2:	bd10      	pop	{r4, pc}

023ffae4 <_Z20acquireSerial2Bufferv>:
 23ffae4:	b510      	push	{r4, lr}
 23ffae6:	4604      	mov	r4, r0
 23ffae8:	f7ff ffda 	bl	23ffaa0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffaec:	4620      	mov	r0, r4
 23ffaee:	bd10      	pop	{r4, pc}

023ffaf0 <_Z20acquireSerial3Bufferv>:
 23ffaf0:	b510      	push	{r4, lr}
 23ffaf2:	4604      	mov	r4, r0
 23ffaf4:	f7ff ffd4 	bl	23ffaa0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffaf8:	4620      	mov	r0, r4
 23ffafa:	bd10      	pop	{r4, pc}

023ffafc <_Z22__fetch_global_Serial1v>:
{
 23ffafc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffafe:	4d0e      	ldr	r5, [pc, #56]	; (23ffb38 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb00:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb02:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb06:	f011 0401 	ands.w	r4, r1, #1
 23ffb0a:	d111      	bne.n	23ffb30 <_Z22__fetch_global_Serial1v+0x34>
 23ffb0c:	4628      	mov	r0, r5
 23ffb0e:	f7fe fd34 	bl	23fe57a <__cxa_guard_acquire>
 23ffb12:	b168      	cbz	r0, 23ffb30 <_Z22__fetch_global_Serial1v+0x34>
 23ffb14:	a801      	add	r0, sp, #4
 23ffb16:	f7ff ffdf 	bl	23ffad8 <_Z20acquireSerial1Bufferv>
 23ffb1a:	4621      	mov	r1, r4
 23ffb1c:	aa01      	add	r2, sp, #4
 23ffb1e:	4807      	ldr	r0, [pc, #28]	; (23ffb3c <_Z22__fetch_global_Serial1v+0x40>)
 23ffb20:	f7ff fd6e 	bl	23ff600 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb24:	4628      	mov	r0, r5
 23ffb26:	f7fe fd2d 	bl	23fe584 <__cxa_guard_release>
 23ffb2a:	4805      	ldr	r0, [pc, #20]	; (23ffb40 <_Z22__fetch_global_Serial1v+0x44>)
 23ffb2c:	f000 f878 	bl	23ffc20 <atexit>
    return serial1;
}
 23ffb30:	4802      	ldr	r0, [pc, #8]	; (23ffb3c <_Z22__fetch_global_Serial1v+0x40>)
 23ffb32:	b007      	add	sp, #28
 23ffb34:	bd30      	pop	{r4, r5, pc}
 23ffb36:	bf00      	nop
 23ffb38:	1007af0c 	.word	0x1007af0c
 23ffb3c:	1007af18 	.word	0x1007af18
 23ffb40:	023ffa9d 	.word	0x023ffa9d

023ffb44 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffb44:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb46:	4c0d      	ldr	r4, [pc, #52]	; (23ffb7c <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb48:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb4a:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb4e:	07db      	lsls	r3, r3, #31
 23ffb50:	d411      	bmi.n	23ffb76 <_Z22__fetch_global_Serial2v+0x32>
 23ffb52:	4620      	mov	r0, r4
 23ffb54:	f7fe fd11 	bl	23fe57a <__cxa_guard_acquire>
 23ffb58:	b168      	cbz	r0, 23ffb76 <_Z22__fetch_global_Serial2v+0x32>
 23ffb5a:	a801      	add	r0, sp, #4
 23ffb5c:	f7ff ffc2 	bl	23ffae4 <_Z20acquireSerial2Bufferv>
 23ffb60:	2101      	movs	r1, #1
 23ffb62:	aa01      	add	r2, sp, #4
 23ffb64:	4806      	ldr	r0, [pc, #24]	; (23ffb80 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb66:	f7ff fd4b 	bl	23ff600 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb6a:	4620      	mov	r0, r4
 23ffb6c:	f7fe fd0a 	bl	23fe584 <__cxa_guard_release>
 23ffb70:	4804      	ldr	r0, [pc, #16]	; (23ffb84 <_Z22__fetch_global_Serial2v+0x40>)
 23ffb72:	f000 f855 	bl	23ffc20 <atexit>
	return serial2;
}
 23ffb76:	4802      	ldr	r0, [pc, #8]	; (23ffb80 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb78:	b006      	add	sp, #24
 23ffb7a:	bd10      	pop	{r4, pc}
 23ffb7c:	1007af10 	.word	0x1007af10
 23ffb80:	1007af2c 	.word	0x1007af2c
 23ffb84:	023ffad7 	.word	0x023ffad7

023ffb88 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffb88:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffb8a:	f7ff ffdb 	bl	23ffb44 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb8e:	4b07      	ldr	r3, [pc, #28]	; (23ffbac <_Z15serialEventRun2v+0x24>)
 23ffb90:	4604      	mov	r4, r0
 23ffb92:	b153      	cbz	r3, 23ffbaa <_Z15serialEventRun2v+0x22>
 23ffb94:	f7ff fd48 	bl	23ff628 <_ZN11USARTSerial9isEnabledEv>
 23ffb98:	b138      	cbz	r0, 23ffbaa <_Z15serialEventRun2v+0x22>
 23ffb9a:	6823      	ldr	r3, [r4, #0]
 23ffb9c:	4620      	mov	r0, r4
 23ffb9e:	691b      	ldr	r3, [r3, #16]
 23ffba0:	4798      	blx	r3
 23ffba2:	2800      	cmp	r0, #0
 23ffba4:	dd01      	ble.n	23ffbaa <_Z15serialEventRun2v+0x22>
        handler();
 23ffba6:	e000      	b.n	23ffbaa <_Z15serialEventRun2v+0x22>
 23ffba8:	bf00      	nop
}
 23ffbaa:	bd10      	pop	{r4, pc}
 23ffbac:	00000000 	.word	0x00000000

023ffbb0 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffbb0:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbb2:	4c0d      	ldr	r4, [pc, #52]	; (23ffbe8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffbb4:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbb6:	e8d4 3f8f 	ldab	r3, [r4]
 23ffbba:	07db      	lsls	r3, r3, #31
 23ffbbc:	d411      	bmi.n	23ffbe2 <_Z22__fetch_global_Serial3v+0x32>
 23ffbbe:	4620      	mov	r0, r4
 23ffbc0:	f7fe fcdb 	bl	23fe57a <__cxa_guard_acquire>
 23ffbc4:	b168      	cbz	r0, 23ffbe2 <_Z22__fetch_global_Serial3v+0x32>
 23ffbc6:	a801      	add	r0, sp, #4
 23ffbc8:	f7ff ff92 	bl	23ffaf0 <_Z20acquireSerial3Bufferv>
 23ffbcc:	2102      	movs	r1, #2
 23ffbce:	aa01      	add	r2, sp, #4
 23ffbd0:	4806      	ldr	r0, [pc, #24]	; (23ffbec <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbd2:	f7ff fd15 	bl	23ff600 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffbd6:	4620      	mov	r0, r4
 23ffbd8:	f7fe fcd4 	bl	23fe584 <__cxa_guard_release>
 23ffbdc:	4804      	ldr	r0, [pc, #16]	; (23ffbf0 <_Z22__fetch_global_Serial3v+0x40>)
 23ffbde:	f000 f81f 	bl	23ffc20 <atexit>
	return serial3;
}
 23ffbe2:	4802      	ldr	r0, [pc, #8]	; (23ffbec <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbe4:	b006      	add	sp, #24
 23ffbe6:	bd10      	pop	{r4, pc}
 23ffbe8:	1007af14 	.word	0x1007af14
 23ffbec:	1007af40 	.word	0x1007af40
 23ffbf0:	023ffad5 	.word	0x023ffad5

023ffbf4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffbf4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffbf6:	f7ff ffdb 	bl	23ffbb0 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffbfa:	4b07      	ldr	r3, [pc, #28]	; (23ffc18 <_Z15serialEventRun3v+0x24>)
 23ffbfc:	4604      	mov	r4, r0
 23ffbfe:	b153      	cbz	r3, 23ffc16 <_Z15serialEventRun3v+0x22>
 23ffc00:	f7ff fd12 	bl	23ff628 <_ZN11USARTSerial9isEnabledEv>
 23ffc04:	b138      	cbz	r0, 23ffc16 <_Z15serialEventRun3v+0x22>
 23ffc06:	6823      	ldr	r3, [r4, #0]
 23ffc08:	4620      	mov	r0, r4
 23ffc0a:	691b      	ldr	r3, [r3, #16]
 23ffc0c:	4798      	blx	r3
 23ffc0e:	2800      	cmp	r0, #0
 23ffc10:	dd01      	ble.n	23ffc16 <_Z15serialEventRun3v+0x22>
        handler();
 23ffc12:	e000      	b.n	23ffc16 <_Z15serialEventRun3v+0x22>
 23ffc14:	bf00      	nop
}
 23ffc16:	bd10      	pop	{r4, pc}
 23ffc18:	00000000 	.word	0x00000000

023ffc1c <_ZnajRKSt9nothrow_t>:
 23ffc1c:	f7fe bca9 	b.w	23fe572 <_Znaj>

023ffc20 <atexit>:
 23ffc20:	2300      	movs	r3, #0
 23ffc22:	4601      	mov	r1, r0
 23ffc24:	461a      	mov	r2, r3
 23ffc26:	4618      	mov	r0, r3
 23ffc28:	f000 b844 	b.w	23ffcb4 <__register_exitproc>

023ffc2c <memcpy>:
 23ffc2c:	440a      	add	r2, r1
 23ffc2e:	1e43      	subs	r3, r0, #1
 23ffc30:	4291      	cmp	r1, r2
 23ffc32:	d100      	bne.n	23ffc36 <memcpy+0xa>
 23ffc34:	4770      	bx	lr
 23ffc36:	b510      	push	{r4, lr}
 23ffc38:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc3c:	4291      	cmp	r1, r2
 23ffc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc42:	d1f9      	bne.n	23ffc38 <memcpy+0xc>
 23ffc44:	bd10      	pop	{r4, pc}

023ffc46 <memset>:
 23ffc46:	4402      	add	r2, r0
 23ffc48:	4603      	mov	r3, r0
 23ffc4a:	4293      	cmp	r3, r2
 23ffc4c:	d100      	bne.n	23ffc50 <memset+0xa>
 23ffc4e:	4770      	bx	lr
 23ffc50:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc54:	e7f9      	b.n	23ffc4a <memset+0x4>
	...

023ffc58 <srand>:
 23ffc58:	b538      	push	{r3, r4, r5, lr}
 23ffc5a:	4b10      	ldr	r3, [pc, #64]	; (23ffc9c <srand+0x44>)
 23ffc5c:	4604      	mov	r4, r0
 23ffc5e:	681d      	ldr	r5, [r3, #0]
 23ffc60:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc62:	b9b3      	cbnz	r3, 23ffc92 <srand+0x3a>
 23ffc64:	2018      	movs	r0, #24
 23ffc66:	f7ff f9b7 	bl	23fefd8 <malloc>
 23ffc6a:	4602      	mov	r2, r0
 23ffc6c:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc6e:	b920      	cbnz	r0, 23ffc7a <srand+0x22>
 23ffc70:	4b0b      	ldr	r3, [pc, #44]	; (23ffca0 <srand+0x48>)
 23ffc72:	2142      	movs	r1, #66	; 0x42
 23ffc74:	480b      	ldr	r0, [pc, #44]	; (23ffca4 <srand+0x4c>)
 23ffc76:	f7ff f9cb 	bl	23ff010 <__assert_func>
 23ffc7a:	490b      	ldr	r1, [pc, #44]	; (23ffca8 <srand+0x50>)
 23ffc7c:	4b0b      	ldr	r3, [pc, #44]	; (23ffcac <srand+0x54>)
 23ffc7e:	e9c0 1300 	strd	r1, r3, [r0]
 23ffc82:	4b0b      	ldr	r3, [pc, #44]	; (23ffcb0 <srand+0x58>)
 23ffc84:	2100      	movs	r1, #0
 23ffc86:	6083      	str	r3, [r0, #8]
 23ffc88:	230b      	movs	r3, #11
 23ffc8a:	8183      	strh	r3, [r0, #12]
 23ffc8c:	2001      	movs	r0, #1
 23ffc8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffc92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc94:	2200      	movs	r2, #0
 23ffc96:	611c      	str	r4, [r3, #16]
 23ffc98:	615a      	str	r2, [r3, #20]
 23ffc9a:	bd38      	pop	{r3, r4, r5, pc}
 23ffc9c:	1007ada4 	.word	0x1007ada4
 23ffca0:	023fff59 	.word	0x023fff59
 23ffca4:	023fff70 	.word	0x023fff70
 23ffca8:	abcd330e 	.word	0xabcd330e
 23ffcac:	e66d1234 	.word	0xe66d1234
 23ffcb0:	0005deec 	.word	0x0005deec

023ffcb4 <__register_exitproc>:
 23ffcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffcb8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd78 <__register_exitproc+0xc4>
 23ffcbc:	4606      	mov	r6, r0
 23ffcbe:	461f      	mov	r7, r3
 23ffcc0:	460d      	mov	r5, r1
 23ffcc2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcc6:	4691      	mov	r9, r2
 23ffcc8:	f000 f858 	bl	23ffd7c <__retarget_lock_acquire_recursive>
 23ffccc:	4b26      	ldr	r3, [pc, #152]	; (23ffd68 <__register_exitproc+0xb4>)
 23ffcce:	681c      	ldr	r4, [r3, #0]
 23ffcd0:	b934      	cbnz	r4, 23ffce0 <__register_exitproc+0x2c>
 23ffcd2:	4c26      	ldr	r4, [pc, #152]	; (23ffd6c <__register_exitproc+0xb8>)
 23ffcd4:	601c      	str	r4, [r3, #0]
 23ffcd6:	4b26      	ldr	r3, [pc, #152]	; (23ffd70 <__register_exitproc+0xbc>)
 23ffcd8:	b113      	cbz	r3, 23ffce0 <__register_exitproc+0x2c>
 23ffcda:	681b      	ldr	r3, [r3, #0]
 23ffcdc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffce0:	6863      	ldr	r3, [r4, #4]
 23ffce2:	2b1f      	cmp	r3, #31
 23ffce4:	dd07      	ble.n	23ffcf6 <__register_exitproc+0x42>
 23ffce6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcea:	f000 f849 	bl	23ffd80 <__retarget_lock_release_recursive>
 23ffcee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffcf6:	b35e      	cbz	r6, 23ffd50 <__register_exitproc+0x9c>
 23ffcf8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffcfc:	b988      	cbnz	r0, 23ffd22 <__register_exitproc+0x6e>
 23ffcfe:	4b1d      	ldr	r3, [pc, #116]	; (23ffd74 <__register_exitproc+0xc0>)
 23ffd00:	b923      	cbnz	r3, 23ffd0c <__register_exitproc+0x58>
 23ffd02:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd06:	f000 f83a 	bl	23ffd7e <__retarget_lock_release>
 23ffd0a:	e7f0      	b.n	23ffcee <__register_exitproc+0x3a>
 23ffd0c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd10:	f7ff f962 	bl	23fefd8 <malloc>
 23ffd14:	2800      	cmp	r0, #0
 23ffd16:	d0f4      	beq.n	23ffd02 <__register_exitproc+0x4e>
 23ffd18:	2300      	movs	r3, #0
 23ffd1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd1e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd22:	6863      	ldr	r3, [r4, #4]
 23ffd24:	2201      	movs	r2, #1
 23ffd26:	2e02      	cmp	r6, #2
 23ffd28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd2c:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd38:	ea43 0302 	orr.w	r3, r3, r2
 23ffd3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd44:	bf02      	ittt	eq
 23ffd46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd4a:	4313      	orreq	r3, r2
 23ffd4c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd50:	6863      	ldr	r3, [r4, #4]
 23ffd52:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd56:	1c5a      	adds	r2, r3, #1
 23ffd58:	3302      	adds	r3, #2
 23ffd5a:	6062      	str	r2, [r4, #4]
 23ffd5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd60:	f000 f80e 	bl	23ffd80 <__retarget_lock_release_recursive>
 23ffd64:	2000      	movs	r0, #0
 23ffd66:	e7c4      	b.n	23ffcf2 <__register_exitproc+0x3e>
 23ffd68:	1007afe0 	.word	0x1007afe0
 23ffd6c:	1007af54 	.word	0x1007af54
 23ffd70:	00000000 	.word	0x00000000
 23ffd74:	023fefd9 	.word	0x023fefd9
 23ffd78:	1007ae08 	.word	0x1007ae08

023ffd7c <__retarget_lock_acquire_recursive>:
 23ffd7c:	4770      	bx	lr

023ffd7e <__retarget_lock_release>:
 23ffd7e:	4770      	bx	lr

023ffd80 <__retarget_lock_release_recursive>:
 23ffd80:	4770      	bx	lr
	...

023ffd84 <dynalib_user>:
 23ffd84:	e539 023f e561 023f e565 023f 0000 0000     9.?.a.?.e.?.....
 23ffd94:	4548 5959 5959 0021 6557 6320 6572 7461     HEYYYY!.We creat
 23ffda4:	6465 6120 7020 6c75 6573 6553 736e 726f     ed a pulseSensor
 23ffdb4:	4f20 6a62 6365 2074 0021 99e2 20a5 4120      Object !....  A
 23ffdc4:	4820 6165 7472 6542 7461 4820 7061 6570      HeartBeat Happe
 23ffdd4:	656e 2064 2021 4200 4d50 203a 4400 6979     ned ! .BPM: .Dyi
 23ffde4:	676e 0021                                   ng!.

023ffde8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf0:	f0bf 023f f0b5 023f f0ab 023f f0a1 023f     ..?...?...?...?.
 23ffe00:	f095 023f f089 023f f2b1 023f f2b9 023f     ..?...?...?...?.
 23ffe10:	f07d 023f f075 023f f06b 023f f061 023f     }.?.u.?.k.?.a.?.
 23ffe20:	f2e9 023f                                   ..?.

023ffe24 <_ZTV7TwoWire>:
	...
 23ffe2c:	f0dd 023f f127 023f f0ff 023f f0df 023f     ..?.'.?...?...?.
 23ffe3c:	f107 023f f10f 023f f117 023f f11f 023f     ..?...?...?...?.

023ffe4c <_ZTV9IPAddress>:
	...
 23ffe54:	f181 023f f171 023f f173 023f 7061 0070     ..?.q.?.s.?.app.

023ffe64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe6c:	f271 023f f27b 023f f285 023f f28f 023f     q.?.{.?...?...?.
 23ffe7c:	f299 023f f2a5 023f f2b1 023f f2b9 023f     ..?...?...?...?.
 23ffe8c:	f2c1 023f f2cd 023f f2d5 023f f2df 023f     ..?...?...?...?.
 23ffe9c:	f2e9 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffeac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffebc <_ZTV11USARTSerial>:
	...
 23ffec4:	f585 023f f5f1 023f f5c9 023f f3d5 023f     ..?...?...?...?.
 23ffed4:	f599 023f f5b5 023f f5a7 023f f5c3 023f     ..?...?...?...?.
 23ffee4:	f587 023f f58b 023f                         ..?...?.

023ffeec <_ZTV9USBSerial>:
	...
 23ffef4:	f635 023f f69d 023f f673 023f f3d5 023f     5.?...?.s.?...?.
 23fff04:	f665 023f f637 023f f647 023f f697 023f     e.?.7.?.G.?...?.
 23fff14:	f657 023f f62f 023f                         W.?./.?.

023fff1c <_ZTVN5spark9WiFiClassE>:
	...
 23fff24:	f793 023f f789 023f f77f 023f f735 023f     ..?...?...?.5.?.
 23fff34:	f773 023f f767 023f f2b1 023f f2b9 023f     s.?.g.?...?...?.
 23fff44:	f75b 023f f753 023f f749 023f f73f 023f     [.?.S.?.I.?.?.?.
 23fff54:	f2e9 023f                                   ..?.

023fff58 <_ZSt7nothrow>:
 23fff58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffa8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fe789 	.word	0x023fe789
 23fffd0:	023ff051 	.word	0x023ff051
 23fffd4:	023ff0c9 	.word	0x023ff0c9
 23fffd8:	023ff261 	.word	0x023ff261
 23fffdc:	023ff3c1 	.word	0x023ff3c1
 23fffe0:	023ff495 	.word	0x023ff495
 23fffe4:	023ff54d 	.word	0x023ff54d
 23fffe8:	023ff571 	.word	0x023ff571
 23fffec:	023ff79d 	.word	0x023ff79d
